// Autogenerated from development/constructs/comment_construct.i

package ideal.development.constructs;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.library.texts.*;
import ideal.development.comments.*;
import ideal.development.documenters.*;
import ideal.development.comments.documentation;

import javax.annotation.Nullable;

public class comment_construct extends base_construct implements annotation_construct, documentation {
  public final comment the_comment;
  private @Nullable text_fragment the_text_fragment;
  public @Override @Nullable text_fragment section(final documentation_section the_section) {
    if (this.the_text_fragment == null) {
      this.the_text_fragment = doc_comment_processor.parse(this.the_comment.content);
    }
    if (the_section == documentation_section.ALL) {
      return this.the_text_fragment;
    } else if (the_section == documentation_section.SUMMARY) {
      final @Nullable text_fragment text = this.the_text_fragment;
      assert text != null;
      return (base_string) summary_extractor.get_summary(text);
    } else {
      {
        utilities.panic(ideal.machine.elements.runtime_util.concatenate(new base_string("Unknown section: "), the_section));
        return null;
      }
    }
  }
  public comment_construct(final comment the_comment, final @Nullable text_fragment the_text_fragment, final origin generated_origin) {
    super(generated_origin);
    assert the_comment != null;
    this.the_comment = the_comment;
    this.the_text_fragment = the_text_fragment;
  }
  public @Override readonly_list<construct> children() {
    final base_list<construct> generated_result = new base_list<construct>();
    return generated_result;
  }
}
