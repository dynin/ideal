// Autogenerated from development/constructs/operator_construct.i

package ideal.development.constructs;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.names.operator;

public class operator_construct extends base_construct {
  public final operator the_operator;
  public final readonly_list<construct> arguments;
  public operator_construct(final operator the_operator, final readonly_list<construct> arguments, final origin the_origin) {
    super(the_origin);
    assert ideal.machine.elements.runtime_util.values_equal(arguments.size(), the_operator.the_operator_type.arity);
    this.the_operator = the_operator;
    this.arguments = arguments;
  }
  public operator_construct(final operator the_operator, final construct argument, final origin the_origin) {
    this(the_operator, new base_immutable_list<construct>(new ideal.machine.elements.array<construct>(new construct[]{ argument })), the_origin);
  }
  public operator_construct(final operator the_operator, final construct left, final construct right, final origin the_origin) {
    this(the_operator, new base_immutable_list<construct>(new ideal.machine.elements.array<construct>(new construct[]{ left, right })), the_origin);
  }
  public @Override readonly_list<construct> children() {
    final base_list<construct> generated_result = new base_list<construct>();
    generated_result.append_all(this.arguments);
    return generated_result;
  }
}
