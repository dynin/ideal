// Autogenerated from development/declarations/declaration_util.i

package ideal.development.declarations;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.futures.*;
import ideal.development.names.*;
import ideal.development.comments.*;
import ideal.development.modifiers.*;
import ideal.development.comments.documentation;

import javax.annotation.Nullable;

public class declaration_util {
  public static @Nullable declaration get_declaration(final @Nullable origin the_origin) {
    @Nullable origin current_origin = the_origin;
    while (current_origin != null) {
      if (current_origin instanceof declaration) {
        return ((declaration) current_origin);
      }
      if (current_origin instanceof action) {
        final @Nullable declaration the_declaration = ((action) current_origin).get_declaration();
        if (the_declaration != null) {
          return the_declaration;
        }
      }
      current_origin = current_origin.deeper_origin();
    }
    return null;
  }
  public static @Nullable type_declaration to_type_declaration(final @Nullable origin the_origin) {
    if (the_origin instanceof type_declaration) {
      return ((type_declaration) the_origin).master_declaration();
    } else if (the_origin instanceof type_announcement) {
      return ((type_announcement) the_origin).get_type_declaration().master_declaration();
    } else {
      return null;
    }
  }
  public static @Nullable type_declaration get_type_declaration(final type the_type) {
    return declaration_util.to_type_declaration(the_type.principal().get_declaration());
  }
  public static readonly_list<type_declaration> get_declared_types(final type_declaration the_type_declaration) {
    final base_list<type_declaration> result = new base_list<type_declaration>();
    {
      final readonly_list<declaration> the_declaration_list = the_type_declaration.get_signature();
      for (int the_declaration_index = 0; the_declaration_index < the_declaration_list.size(); the_declaration_index += 1) {
        final declaration the_declaration = the_declaration_list.get(the_declaration_index);
        if (the_declaration instanceof type_declaration) {
          result.append(((type_declaration) the_declaration));
        }
      }
    }
    return result;
  }
  public static readonly_list<supertype_declaration> get_declared_supertypes(final type_declaration the_type_declaration) {
    final base_list<supertype_declaration> result = new base_list<supertype_declaration>();
    {
      final readonly_list<declaration> the_declaration_list = the_type_declaration.get_signature();
      for (int the_declaration_index = 0; the_declaration_index < the_declaration_list.size(); the_declaration_index += 1) {
        final declaration the_declaration = the_declaration_list.get(the_declaration_index);
        if (the_declaration instanceof supertype_declaration) {
          result.append(((supertype_declaration) the_declaration));
        }
      }
    }
    return result;
  }
  public static readonly_list<variable_declaration> get_declared_variables(final type_declaration the_type_declaration) {
    final base_list<variable_declaration> result = new base_list<variable_declaration>();
    {
      final readonly_list<declaration> the_declaration_list = the_type_declaration.get_signature();
      for (int the_declaration_index = 0; the_declaration_index < the_declaration_list.size(); the_declaration_index += 1) {
        final declaration the_declaration = the_declaration_list.get(the_declaration_index);
        if (the_declaration instanceof variable_declaration) {
          result.append(((variable_declaration) the_declaration));
        }
      }
    }
    return result;
  }
  public static readonly_list<procedure_declaration> get_declared_procedures(final type_declaration the_type_declaration) {
    final base_list<procedure_declaration> result = new base_list<procedure_declaration>();
    {
      final readonly_list<declaration> the_declaration_list = the_type_declaration.get_signature();
      for (int the_declaration_index = 0; the_declaration_index < the_declaration_list.size(); the_declaration_index += 1) {
        final declaration the_declaration = the_declaration_list.get(the_declaration_index);
        if (the_declaration instanceof procedure_declaration) {
          result.append(((procedure_declaration) the_declaration));
        }
      }
    }
    return result;
  }
}
