// Autogenerated from development/documenters/test_doc_grammar.i

package ideal.development.documenters;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.runtime.texts.*;
import ideal.library.channels.output;
import ideal.runtime.texts.text_library.*;
import ideal.machine.characters.normal_handler;
import ideal.machine.channels.string_writer;

public class test_doc_grammar {
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test("test_doc_grammar.test_simple_parse");
    test_simple_parse();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_doc_grammar.test_parse_errors");
    test_parse_errors();
    ideal.machine.elements.runtime_util.end_test();
  }
  public string error_message;
  public doc_grammar make_grammar() {
    return new doc_grammar(normal_handler.instance);
  }
  public void test_simple_parse() {
    final doc_grammar grammar = this.make_grammar();
    final ideal.library.patterns.matcher<Character, text_fragment> content_matcher = grammar.content;
    assert content_matcher.call(new base_string("<html>foo</html>"));
    assert content_matcher.call(new base_string("  <html>foo</html>  "));
    assert content_matcher.call(new base_string("  <html  >foo</html  >  "));
    assert content_matcher.call(new base_string("  <html  >Hello &amp; goodbye!</html  >  "));
    assert content_matcher.call(new base_string("  <html  />  "));
    assert content_matcher.call(new base_string("<html/>"));
    assert content_matcher.call(new base_string("  <html>Hello <em>world!</em></html>  "));
    assert content_matcher.call(new base_string("  <html><body ><p>Hello <em >world!</em ></p></body ></html>  "));
    assert content_matcher.call(new base_string("  <html><body > <p>Hello<br />world!</p> </body ></html>  "));
    assert content_matcher.call(new base_string("  <html><body > Hello &lt;world!&gt; </body ></html>  "));
    assert content_matcher.call(new base_string("<html><p class=\'klass\'>foo</p></html>"));
    assert content_matcher.call(new base_string("<html><a class = \'klass\' href = \'link\'>bar</a></html>"));
    assert content_matcher.call(new base_string("<html><p class = \'value\">==\' attr=\"foo\'\">foo</p></html>"));
    assert content_matcher.call(new base_string("<html><p class = \'***\' attr=\"baz\">foo</p></html>"));
    assert content_matcher.call(new base_string(" no markup "));
    assert content_matcher.call(new base_string("  &amp;<html>foo</html>  "));
    assert !content_matcher.call(new base_string("  <html>foo  "));
    assert !content_matcher.call(new base_string("  <html>foo<bar>  "));
    assert !content_matcher.call(new base_string("  <>foo  "));
    assert !content_matcher.call(new base_string("<html><p class=\'klass\">foo</p></html>"));
    assert !content_matcher.call(new base_string("<html><p class=\'klass\'>foo</p class=\"foo\"></html>"));
    assert !content_matcher.call(new base_string("<html foo= ><p class=\'klass\'>foo</p></html>"));
    assert !content_matcher.call(new base_string("<html foo=bar><p class=\'klass\'>foo</p></html>"));
    assert !content_matcher.call(new base_string("  foo| unmatched  "));
    assert content_matcher.call(new base_string("  <abc>foo</def>  "));
    assert this.matches(content_matcher.parse(new base_string("  <html>foo</html>  ")), new base_string("  <html>foo</html>  "));
    assert this.matches(content_matcher.parse(new base_string("  <html  >Hello &amp; goodbye!</html  >  ")), new base_string("  <html>Hello &amp; goodbye!</html>  "));
    assert this.matches(content_matcher.parse(new base_string("  <html  />  ")), new base_string("  <html />  "));
    assert this.matches(content_matcher.parse(new base_string("  <html>Hello <em>world!</em></html>  ")), new base_string("  <html>Hello <em>world!</em></html>  "));
    assert this.matches(content_matcher.parse(new base_string("  <html><body > <p>Hello<br />world!</p> </body ></html>  ")), new base_string("  <html><body> <p>Hello<br />world!</p> </body></html>  "));
    assert this.matches(content_matcher.parse(new base_string("<html><p class=\'klass\'>foo</p></html>")), new base_string("<html><p class=\'klass\'>foo</p></html>"));
    assert this.matches(content_matcher.parse(new base_string("<html><p id=\'f&amp;f\'>foo</p></html>")), new base_string("<html><p id=\'f&amp;f\'>foo</p></html>"));
    assert this.matches(content_matcher.parse(new base_string("<html><a class = \'klass\' href = \'link\'>bar</a></html>")), new base_string("<html><a class=\'klass\' href=\'link\'>bar</a></html>"));
    assert this.matches(content_matcher.parse(new base_string("<html><p class = \'value\">==\' id=\"foo\'\">foo</p></html>")), new base_string("<html><p class=\'value&quot;&gt;==\' id=\'foo&apos;\'>foo</p></html>"));
    assert this.matches(content_matcher.parse(new base_string("<html><p class = \'***\' id=\"baz\">foo</p></html>")), new base_string("<html><p class=\'***\' id=\'baz\'>foo</p></html>"));
    assert this.matches(content_matcher.parse(new base_string(" |<em>Hello</em>, world!| ")), new base_string(" <code><em>Hello</em>, world!</code> "));
    assert this.matches(content_matcher.parse(new base_string("doc <p class=\'klass\'>foo: |bar|</p>")), new base_string("doc <p class=\'klass\'>foo: <code>bar</code></p>"));
    assert this.matches(content_matcher.parse(new base_string("<j class = \'klass\' href = \'link\'>bar |foo|</j>")), new base_string("<j class=\'klass\' href=\'link\'>bar <code>foo</code></j>"));
    assert this.matches(content_matcher.parse(new base_string("<c><p class = \'value\">==\' id=\"foo\'\">foo</p></c> |bar| ")), new base_string("<c><p class=\'value&quot;&gt;==\' id=\'foo&apos;\'>foo</p></c> <code>bar</code> "));
  }
  public void test_parse_errors() {
    final doc_grammar grammar = this.make_grammar();
    final doc_parser parser = new doc_parser(grammar, new procedure1<Void, string>() {
      @Override public Void call(string first) {
        test_doc_grammar.this.report_error(first);
        return null;
      }
    });
    assert this.matches_with_error(parser.parse_content(new base_string("<html>&bug;</html>")), new base_string("<html>&_error_;</html>"), new base_string("Unrecognized entity: bug"));
    assert this.matches_with_error(parser.parse_content(new base_string("<html><foo>Hello!</foo></html>")), new base_string("<html><_error_>Hello!</_error_></html>"), new base_string("Unrecognized element name: foo"));
    assert this.matches_with_error(parser.parse_content(new base_string("<html><b attr=\"value\">Hello!</b></html>")), new base_string("<html><b _error_=\'value\'>Hello!</b></html>"), new base_string("Unrecognized attribute name: attr"));
    assert this.matches_with_error(parser.parse_content(new base_string("<html><a>Hello!</b></html>")), new base_string("<html><a>Hello!</a></html>"), new base_string("Mismatched element name: start a, end b"));
  }
  private void report_error(final string error_message) {
    this.error_message = error_message;
  }
  private boolean matches_with_error(final text_fragment the_text_fragment, final string expected, final string expected_error) {
    return this.matches(the_text_fragment, expected) && ideal.machine.elements.runtime_util.values_equal(this.error_message, expected_error);
  }
  private boolean matches(final text_fragment the_text_fragment, final string expected) {
    final string_writer the_writer = new string_writer();
    final markup_formatter the_formatter = new markup_formatter(the_writer, new base_string(""), false);
    the_formatter.write(the_text_fragment);
    return ideal.machine.elements.runtime_util.values_equal(the_writer.elements(), expected);
  }
}
