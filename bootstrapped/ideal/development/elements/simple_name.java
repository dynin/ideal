// Autogenerated from development/elements/simple_name.i

package ideal.development.elements;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.displayable;
import ideal.machine.channels.string_writer;
import java.lang.String;

import javax.annotation.Nullable;

public class simple_name extends debuggable implements action_name, displayable {
  public final char the_underscore = '_';
  private static final dictionary<immutable_list<string>, simple_name> all_names = new hash_dictionary<immutable_list<string>, simple_name>();
  public final immutable_list<string> segments;
  private simple_name(final immutable_list<string> segments) {
    this.segments = segments;
  }
  public @Override string to_string() {
    if (segments.size() == 1) {
      return segments.first();
    } else {
      final string_writer the_writer = new string_writer();
      for (int i = 0; i < segments.size(); i += 1) {
        the_writer.write_all(segments.get(i));
        if (i != segments.size() - 1) {
          the_writer.write(the_underscore);
        }
      }
      return the_writer.extract_elements();
    }
  }
  public @Override string display() {
    return to_string();
  }
  public static simple_name make_from_segments(final immutable_list<string> segments) {
    assert !segments.is_empty();
    final @Nullable simple_name existing_name = all_names.get(segments);
    if (existing_name != null) {
      return existing_name;
    }
    final simple_name result = new simple_name(segments);
    all_names.put(segments, result);
    return result;
  }
  public static simple_name make(final String name) {
    assert name.length() > 0;
    final list<string> segments = new base_list<string>();
    int index = 0;
    while (true) {
      final int underscore = name.indexOf('_', index);
      if (underscore < 0) {
        segments.append(new base_string(name.substring(index)));
        break;
      }
      segments.append(new base_string(name.substring(index, underscore)));
      index = underscore + 1;
    }
    return make_from_segments(segments.frozen_copy());
  }
  public static simple_name make(final string name) {
    return make(utilities.s(name));
  }
}
