// Autogenerated from development/flags/create_flags.i

package ideal.development.flags;

import ideal.library.elements.*;
import ideal.development.elements.*;

import javax.annotation.Nullable;

public class create_flags {
  public final @Nullable string top;
  public final @Nullable string input;
  public final @Nullable string output;
  public final @Nullable string target;
  public final boolean RUN;
  public final boolean PRINT;
  public final boolean PRETTY_PRINT;
  public final boolean GENERATE;
  public final boolean UNIT_TESTS;
  public final boolean CURE_UNDECLARED;
  public final boolean HIDE_DECLARATIONS;
  public final boolean DEBUG_CONSTRUCTS;
  public final boolean DEBUG_ACTIONS;
  public final boolean DEBUG_PROGRESS;
  public final boolean DEBUG_IMPORT;
  public final boolean DEBUG_REFLECT;
  public create_flags(final readonly_list<string> arguments, final procedure1<Void, string> error_reporter) {
    final dictionary<string, string> arg_dictionary = ideal.runtime.flags.flags_utilities.parse_flags(arguments, error_reporter);
    this.top = ideal.runtime.flags.flags_utilities.string_flag(arg_dictionary, new ideal.runtime.elements.base_string("top"));
    this.input = ideal.runtime.flags.flags_utilities.string_flag(arg_dictionary, new ideal.runtime.elements.base_string("input"));
    this.output = ideal.runtime.flags.flags_utilities.string_flag(arg_dictionary, new ideal.runtime.elements.base_string("output"));
    this.target = ideal.runtime.flags.flags_utilities.string_flag(arg_dictionary, new ideal.runtime.elements.base_string("target"));
    this.RUN = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("RUN"));
    this.PRINT = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("PRINT"));
    this.PRETTY_PRINT = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("PRETTY_PRINT"));
    this.GENERATE = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("GENERATE"));
    this.UNIT_TESTS = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("UNIT_TESTS"));
    this.CURE_UNDECLARED = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("CURE_UNDECLARED"));
    this.HIDE_DECLARATIONS = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("HIDE_DECLARATIONS"));
    this.DEBUG_CONSTRUCTS = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("DEBUG_CONSTRUCTS"));
    this.DEBUG_ACTIONS = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("DEBUG_ACTIONS"));
    this.DEBUG_PROGRESS = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("DEBUG_PROGRESS"));
    this.DEBUG_IMPORT = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("DEBUG_IMPORT"));
    this.DEBUG_REFLECT = ideal.runtime.flags.flags_utilities.boolean_flag(arg_dictionary, new ideal.runtime.elements.base_string("DEBUG_REFLECT"));
    ideal.runtime.flags.flags_utilities.finish(arg_dictionary, error_reporter);
  }
}
