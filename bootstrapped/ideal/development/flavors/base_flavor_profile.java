// Autogenerated from development/flavors/base_flavor_profile.i

package ideal.development.flavors;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;

import javax.annotation.Nullable;

public class base_flavor_profile extends debuggable implements flavor_profile, readonly_displayable {
  private final string name;
  private final function1<type_flavor, type_flavor> flavor_map;
  public base_flavor_profile(final string name, final function1<type_flavor, type_flavor> flavor_map) {
    this.name = name;
    this.flavor_map = flavor_map;
  }
  public type_flavor map(final type_flavor from) {
    return flavor_map.call(from);
  }
  public @Override type_flavor default_flavor() {
    return map(flavor.DEFAULT_FLAVOR);
  }
  public @Override boolean supports(final type_flavor flavor) {
    return map(flavor) == flavor;
  }
  private @Nullable immutable_list<type_flavor> generated_supported_flavors_cache;
  public @Override immutable_list<type_flavor> supported_flavors() {
    @Nullable immutable_list<type_flavor> result = generated_supported_flavors_cache;
    if (result == null) {
      result = generated_supported_flavors_compute();
      generated_supported_flavors_cache = result;
    }
    return result;
  }
  private immutable_list<type_flavor> generated_supported_flavors_compute() {
    final base_list<type_flavor> filtered_flavors = new base_list<type_flavor>();
    {
      final readonly_list<type_flavor> the_flavor_list = flavor.PRIMARY_FLAVORS;
      for (int the_flavor_index = 0; the_flavor_index < the_flavor_list.size(); the_flavor_index += 1) {
        final type_flavor the_flavor = the_flavor_list.get(the_flavor_index);
        if (this.supports(the_flavor)) {
          filtered_flavors.append(the_flavor);
        }
      }
    }
    return filtered_flavors.frozen_copy();
  }
  public @Override string to_string() {
    return name;
  }
  public @Override string display() {
    return name;
  }
}
