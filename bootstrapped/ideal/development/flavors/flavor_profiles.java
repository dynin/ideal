// Autogenerated from development/flavors/flavor_profiles.i

package ideal.development.flavors;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;

import javax.annotation.Nullable;

public class flavor_profiles {
  private static type_flavor nameonly_map(final type_flavor from) {
    return flavor.nameonly_flavor;
  }
  public static final base_flavor_profile nameonly_profile = new base_flavor_profile(new base_string("nameonly_profile"), new function1<type_flavor, type_flavor>() {
    @Override public type_flavor call(type_flavor first) {
      return flavor_profiles.nameonly_map(first);
    }
  });
  private static type_flavor mutable_map(final type_flavor from) {
    return from;
  }
  public static final base_flavor_profile mutable_profile = new base_flavor_profile(new base_string("mutable_profile"), new function1<type_flavor, type_flavor>() {
    @Override public type_flavor call(type_flavor first) {
      return flavor_profiles.mutable_map(first);
    }
  });
  private static type_flavor shallow_mutable_map(final type_flavor from) {
    if (from == flavor.immutable_flavor) {
      return flavor.deeply_immutable_flavor;
    } else {
      return from;
    }
  }
  public static final base_flavor_profile shallow_mutable_profile = new base_flavor_profile(new base_string("shallow_mutable_profile"), new function1<type_flavor, type_flavor>() {
    @Override public type_flavor call(type_flavor first) {
      return flavor_profiles.shallow_mutable_map(first);
    }
  });
  private static type_flavor immutable_map(final type_flavor from) {
    if (from == flavor.writeonly_flavor || from == flavor.mutable_flavor || from == flavor.readonly_flavor || from == flavor.any_flavor) {
      return flavor.immutable_flavor;
    } else {
      return from;
    }
  }
  public static final base_flavor_profile immutable_profile = new base_flavor_profile(new base_string("immutable_profile"), new function1<type_flavor, type_flavor>() {
    @Override public type_flavor call(type_flavor first) {
      return flavor_profiles.immutable_map(first);
    }
  });
  private static type_flavor deeply_immutable_map(final type_flavor from) {
    if (from == flavor.any_flavor || from == flavor.readonly_flavor || from == flavor.writeonly_flavor || from == flavor.mutable_flavor || from == flavor.immutable_flavor || from == flavor.deeply_immutable_flavor) {
      return flavor.deeply_immutable_flavor;
    } else if (from == flavor.nameonly_flavor || from == flavor.raw_flavor) {
      return from;
    } else {
      {
        utilities.panic(ideal.machine.elements.runtime_util.concatenate(new base_string("Unknown flavor: "), from));
        return null;
      }
    }
  }
  public static final base_flavor_profile deeply_immutable_profile = new base_flavor_profile(new base_string("deeply_immutable_profile"), new function1<type_flavor, type_flavor>() {
    @Override public type_flavor call(type_flavor first) {
      return flavor_profiles.deeply_immutable_map(first);
    }
  });
  public static flavor_profile combine(final @Nullable flavor_profile flavors1, final @Nullable flavor_profile flavors2) {
    if (flavors1 == null) {
      assert flavors2 != null;
      return flavors2;
    }
    if (flavors2 == null) {
      return flavors1;
    }
    if (flavors1 == flavor_profiles.nameonly_profile || flavors2 == flavor_profiles.nameonly_profile) {
      return flavor_profiles.nameonly_profile;
    }
    if (flavors1 == flavor_profiles.deeply_immutable_profile || flavors2 == flavor_profiles.deeply_immutable_profile) {
      return flavor_profiles.deeply_immutable_profile;
    }
    if (flavors1 == flavor_profiles.immutable_profile || flavors2 == flavor_profiles.immutable_profile) {
      return flavor_profiles.immutable_profile;
    }
    if (flavors1 == flavor_profiles.shallow_mutable_profile || flavors2 == flavor_profiles.shallow_mutable_profile) {
      return flavor_profiles.shallow_mutable_profile;
    }
    assert flavors1 == flavor_profiles.mutable_profile && flavors2 == flavor_profiles.mutable_profile;
    return flavor_profiles.mutable_profile;
  }
}
