// Autogenerated from development/futures/test_futures.i

package ideal.development.futures;

import ideal.library.elements.*;
import ideal.runtime.elements.*;

public class test_futures {
  public void test_simple_futures() {
    final base_future<string> future0 = new base_future<string>(new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(future0.value(), new base_string("foo"));
    final base_future<string> future1 = new base_future<string>();
    assert future1.value() == null;
    future1.set(new base_string("bar"));
    assert future1.value() != null;
    assert ideal.machine.elements.runtime_util.values_equal(future1.value(), new base_string("bar"));
  }
  public static Integer count0 = 0;
  public static Integer count1 = 0;
  public static void observe0() {
    test_futures.count0 += 1;
  }
  public static void observe1() {
    test_futures.count1 += 1;
  }
  public void test_future_observers() {
    final lifespan the_lifespan = new base_lifespan(null);
    final base_operation op0 = new base_operation(new procedure0<Void>() {
      @Override public Void call() {
        test_futures.observe0();
        return null;
      }
    }, new base_string("observe0"));
    final base_operation op1 = new base_operation(new procedure0<Void>() {
      @Override public Void call() {
        test_futures.observe1();
        return null;
      }
    }, new base_string("observe1"));
    final base_future<string> future0 = new base_future<string>(new base_string("foo"));
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count0, 0);
    future0.observe(op0, the_lifespan);
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count0, 0);
    final base_future<string> future1 = new base_future<string>();
    future1.observe(op1, the_lifespan);
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count1, 0);
    future1.set(new base_string("bar"));
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count1, 1);
    final lifespan short_lifespan = the_lifespan.make_sub_span();
    final base_future<string> future2 = new base_future<string>();
    future2.observe(op1, short_lifespan);
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count1, 1);
    short_lifespan.dispose();
    future2.set(new base_string("baz"));
    event_queue.process();
    assert ideal.machine.elements.runtime_util.values_equal(test_futures.count1, 1);
    assert ideal.machine.elements.runtime_util.values_equal(future2.value(), new base_string("baz"));
  }
  public test_futures() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_futures.test_simple_futures"));
    this.test_simple_futures();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_futures.test_future_observers"));
    this.test_future_observers();
    ideal.machine.elements.runtime_util.end_test();
  }
}
