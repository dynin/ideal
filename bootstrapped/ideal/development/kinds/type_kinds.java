// Autogenerated from development/kinds/type_kinds.i

package ideal.development.kinds;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import static ideal.development.flavors.flavor_profiles.*;

public class type_kinds {
  public static final base_kind block_kind = new base_kind(new base_string("block"), nameonly_profile);
  public static final base_kind class_kind = new base_kind(new base_string("class"), mutable_profile);
  public static final base_kind concept_kind = new base_kind(new base_string("concept"), mutable_profile);
  public static final base_kind datatype_kind = new base_kind(new base_string("datatype"), mutable_profile);
  public static final base_kind enum_kind = new base_kind(new base_string("enum"), deeply_immutable_profile);
  public static final base_kind interface_kind = new base_kind(new base_string("interface"), mutable_profile);
  public static final base_kind module_kind = new base_kind(new base_string("module"), nameonly_profile);
  public static final base_kind namespace_kind = new base_kind(new base_string("namespace"), nameonly_profile);
  public static final base_kind package_kind = new base_kind(new base_string("package"), nameonly_profile);
  public static final base_kind singleton_kind = new base_kind(new base_string("singleton"), deeply_immutable_profile);
  public static final simple_name INSTANCE_NAME = simple_name.make(new base_string("instance"));
  public static final base_kind project_kind = new base_kind(new base_string("project"), nameonly_profile);
  public static final base_kind service_kind = new base_kind(new base_string("service"), mutable_profile);
  public static final base_kind world_kind = new base_kind(new base_string("world"), mutable_profile);
  public static final base_kind reference_kind = new base_kind(new base_string("reference_kind"), mutable_profile);
  public static final base_kind procedure_kind = new base_kind(new base_string("procedure_kind"), immutable_profile);
  public static final base_kind union_kind = new base_kind(new base_string("union_kind"), mutable_profile);
  public static final base_kind type_alias_kind = new base_kind(new base_string("type_alias_kind"), mutable_profile);
}
