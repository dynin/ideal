// Autogenerated from development/languages/annotation_list_order.i

package ideal.development.languages;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.constructs.*;
import ideal.development.modifiers.*;
import static ideal.development.modifiers.general_modifier.*;

import javax.annotation.Nullable;

public class annotation_list_order implements order<annotation_construct> {
  private final hash_dictionary<modifier_kind, Integer> mapping = new hash_dictionary<modifier_kind, Integer>();
  public annotation_list_order(final readonly_list<modifier_kind> the_list) {
    final readonly_list<Integer> index_list = the_list.indexes();
    for (Integer index_index = 0; index_index < index_list.size(); index_index += 1) {
      final Integer index = index_list.get(index_index);
      this.mapping.put(the_list.get(index), index);
    }
  }
  public @Override sign call(final annotation_construct first, final annotation_construct second) {
    if (first instanceof comment_construct && second instanceof comment_construct) {
      return sign.equal;
    }
    if (first instanceof comment_construct) {
      return sign.less;
    }
    if (second instanceof comment_construct) {
      return sign.greater;
    }
    assert first instanceof modifier_construct;
    assert second instanceof modifier_construct;
    final @Nullable Integer first_index = this.mapping.get(((modifier_construct) first).the_kind);
    final @Nullable Integer second_index = this.mapping.get(((modifier_construct) second).the_kind);
    assert first_index != null;
    assert second_index != null;
    return ideal.machine.elements.runtime_util.compare(first_index, second_index);
  }
}
