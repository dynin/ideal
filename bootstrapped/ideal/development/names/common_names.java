// Autogenerated from development/names/common_names.i

package ideal.development.names;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.symbols.base_symbols;

public class common_names {
  public static final simple_name instance_name = simple_name.make(new base_string("instance"));
  public static final simple_name ideal_name = simple_name.make(new base_string("ideal"));
  public static final simple_name library_name = simple_name.make(new base_string("library"));
  public static final simple_name elements_name = simple_name.make(new base_string("elements"));
  public static final simple_name operators_name = simple_name.make(new base_string("operators"));
  public static final simple_name entity_name = simple_name.make(new base_string("entity"));
  public static final simple_name value_name = simple_name.make(new base_string("value"));
  public static final simple_name void_name = simple_name.make(new base_string("void"));
  public static final simple_name data_name = simple_name.make(new base_string("data"));
  public static final simple_name enum_data_name = simple_name.make(new base_string("enum_data"));
  public static final simple_name boolean_name = simple_name.make(new base_string("boolean"));
  public static final simple_name character_name = simple_name.make(new base_string("character"));
  public static final simple_name integer_name = simple_name.make(new base_string("integer"));
  public static final simple_name nonnegative_name = simple_name.make(new base_string("nonnegative"));
  public static final simple_name string_name = simple_name.make(new base_string("string"));
  public static final simple_name null_name = simple_name.make(new base_string("null"));
  public static final simple_name missing_name = simple_name.make(new base_string("missing"));
  public static final simple_name undefined_name = simple_name.make(new base_string("undefined"));
  public static final simple_name reference_name = simple_name.make(new base_string("reference"));
  public static final simple_name stringable_name = simple_name.make(new base_string("stringable"));
  public static final simple_name equality_comparable_name = simple_name.make(new base_string("equality_comparable"));
  public static final simple_name reference_equality_name = simple_name.make(new base_string("reference_equality"));
  public static final simple_name procedure_name = simple_name.make(new base_string("procedure"));
  public static final simple_name function_name = simple_name.make(new base_string("function"));
  public static final simple_name list_name = simple_name.make(new base_string("list"));
  public static final simple_name get_name = simple_name.make(new base_string("get"));
  public static final simple_name set_name = simple_name.make(new base_string("set"));
  public static final simple_name size_name = simple_name.make(new base_string("size"));
  public static final simple_name call_name = simple_name.make(new base_string("call"));
  public static final simple_name to_string_name = simple_name.make(new base_string("to_string"));
  private static final simple_name first = simple_name.make(new base_string("first"));
  private static final simple_name second = simple_name.make(new base_string("second"));
  private static final simple_name third = simple_name.make(new base_string("third"));
  private static final simple_name fourth = simple_name.make(new base_string("fourth"));
  private static final simple_name fifth = simple_name.make(new base_string("fifth"));
  public static simple_name make_numbered_name(final Integer index) {
    switch (index) {
      case 0:
        return common_names.first;
      case 1:
        return common_names.second;
      case 2:
        return common_names.third;
      case 3:
        return common_names.fourth;
      case 4:
        return common_names.fifth;
      default:
        return simple_name.make(ideal.machine.elements.runtime_util.concatenate(new base_string("number"), (index + 1)));
    }
  }
}
