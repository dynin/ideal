// Autogenerated from development/names/keyword.i

package ideal.development.names;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.symbols.base_symbols;

public class keyword implements deeply_immutable_data {
  public static final simple_name FOR_NAME = simple_name.make(new base_string("for"));
  public static final base_token_type THIS = new base_token_type(new base_string("this"));
  public static final base_token_type SUPER = new base_token_type(new base_string("super"));
  public static final base_token_type NEW = new base_token_type(new base_string("new"));
  public static final base_token_type OR = new base_token_type(new base_string("or"), base_symbols.OR);
  public static final base_token_type AS = new base_token_type(new base_string("as"), base_symbols.AS);
  public static final base_token_type IS = new base_token_type(new base_string("is"), base_symbols.IS);
  public static final base_token_type IS_NOT = new base_token_type(new base_string("is_not"), base_symbols.IS_NOT);
  public static final base_token_type ASSERT = new base_token_type(new base_string("assert"), base_symbols.ASSERT);
  public static final base_token_type RETURN = new base_token_type(new base_string("return"), base_symbols.RETURN);
  public static final base_token_type IF = new base_token_type(new base_string("if"), base_symbols.IF);
  public static final base_token_type ELSE = new base_token_type(new base_string("else"), base_symbols.ELSE);
  public static final base_token_type LOOP = new base_token_type(new base_string("loop"), base_symbols.LOOP);
  public static final base_token_type WHILE = new base_token_type(new base_string("while"), base_symbols.WHILE);
  public static final base_token_type FOR = new base_token_type(new base_string("for"), base_symbols.FOR);
  public static final base_token_type IMPORT = new base_token_type(new base_string("import"), base_symbols.IMPORT);
  public static final base_token_type USE = new base_token_type(new base_string("use"), base_symbols.USE);
  public static final base_token_type TARGET = new base_token_type(new base_string("target"), base_symbols.TARGET);
  public static final base_token_type PLEASE = new base_token_type(new base_string("please"), base_symbols.PLEASE);
}
