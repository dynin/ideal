// Autogenerated from development/names/punctuation.i

package ideal.development.names;

import ideal.library.elements.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.symbols.base_symbols;

public class punctuation {
  public static final quote_type SINGLE_QUOTE = new quote_type('\'');
  public static final quote_type DOUBLE_QUOTE = new quote_type('\"');
  public static final punctuation_type HASH = new punctuation_type(new base_string("#"), base_symbols.HASH);
  public static final punctuation_type ELLIPSIS = new punctuation_type(new base_string("..."));
  public static final punctuation_type OPEN_PARENTHESIS = new punctuation_type(new base_string("("), base_symbols.OPEN_PARENTHESIS);
  public static final punctuation_type CLOSE_PARENTHESIS = new punctuation_type(new base_string(")"), base_symbols.CLOSE_PARENTHESIS);
  public static final punctuation_type OPEN_BRACKET = new punctuation_type(new base_string("["), base_symbols.OPEN_BRACKET);
  public static final punctuation_type CLOSE_BRACKET = new punctuation_type(new base_string("]"), base_symbols.CLOSE_BRACKET);
  public static final punctuation_type OPEN_BRACE = new punctuation_type(new base_string("{"), base_symbols.OPEN_BRACE);
  public static final punctuation_type CLOSE_BRACE = new punctuation_type(new base_string("}"), base_symbols.CLOSE_BRACE);
  public static final punctuation_type DOT = new punctuation_type(new base_string("."), base_symbols.DOT);
  public static final punctuation_type COMMA = new punctuation_type(new base_string(","), base_symbols.COMMA);
  public static final punctuation_type COLON = new punctuation_type(new base_string(":"), base_symbols.COLON);
  public static final punctuation_type SEMICOLON = new punctuation_type(new base_string(";"), base_symbols.SEMICOLON);
  public static final punctuation_type EQUALS_GREATER_THAN = new punctuation_type(new base_string("=>"), base_symbols.EQUALS_GREATER_THAN);
  public static final punctuation_type QUESTION_MARK = new punctuation_type(new base_string("?"), base_symbols.QUESTION_MARK);
  public static final punctuation_type EQUALS = new punctuation_type(new base_string("="), base_symbols.EQUALS);
  public static final punctuation_type ASTERISK = new punctuation_type(new base_string("*"), base_symbols.ASTERISK);
  public static final punctuation_type SLASH = new punctuation_type(new base_string("/"), base_symbols.SLASH);
  public static final punctuation_type PERCENT = new punctuation_type(new base_string("%"), base_symbols.PERCENT);
  public static final punctuation_type PLUS = new punctuation_type(new base_string("+"), base_symbols.PLUS);
  public static final punctuation_type PLUS_PLUS = new punctuation_type(new base_string("++"), base_symbols.PLUS_PLUS);
  public static final punctuation_type PLUS_PLUS_EQUALS = new punctuation_type(new base_string("++="), base_symbols.PLUS_PLUS_EQUALS);
  public static final punctuation_type MINUS = new punctuation_type(new base_string("-"), base_symbols.MINUS);
  public static final punctuation_type EQUALS_EQUALS = new punctuation_type(new base_string("=="), base_symbols.EQUALS_EQUALS);
  public static final punctuation_type EXCLAMATION_MARK = new punctuation_type(new base_string("!"), base_symbols.EXCLAMATION_MARK);
  public static final punctuation_type EXCLAMATION_MARK_EQUALS = new punctuation_type(new base_string("!="), base_symbols.EXCLAMATION_MARK_EQUALS);
  public static final punctuation_type LESS_THAN = new punctuation_type(new base_string("<"), base_symbols.LESS_THAN);
  public static final punctuation_type GREATER_THAN = new punctuation_type(new base_string(">"), base_symbols.GREATER_THAN);
  public static final punctuation_type LESS_THAN_EQUALS = new punctuation_type(new base_string("<="), base_symbols.LESS_THAN_EQUALS);
  public static final punctuation_type GREATER_THAN_EQUALS = new punctuation_type(new base_string(">="), base_symbols.GREATER_THAN_EQUALS);
  public static final punctuation_type LESS_THAN_EQUALS_GREATER_THAN = new punctuation_type(new base_string("<=>"), base_symbols.LESS_THAN_EQUALS_GREATER_THAN);
  public static final punctuation_type DOT_GREATER_THAN = new punctuation_type(new base_string(".>"), base_symbols.DOT_GREATER_THAN);
  public static final punctuation_type EXCLAMATION_GREATER_THAN = new punctuation_type(new base_string("!>"), base_symbols.EXCLAMATION_GREATER_THAN);
  public static final punctuation_type QUESTION_MARK_GREATER_THAN = new punctuation_type(new base_string("?>"), base_symbols.QUESTION_MARK_GREATER_THAN);
  public static final punctuation_type MINUS_MINUS = new punctuation_type(new base_string("--"));
  public static final punctuation_type AMPERSAND = new punctuation_type(new base_string("&"), base_symbols.AMPERSAND);
  public static final punctuation_type CARET = new punctuation_type(new base_string("^"), base_symbols.CARET);
  public static final punctuation_type VERTICAL_BAR = new punctuation_type(new base_string("|"), base_symbols.VERTICAL_BAR);
  public static final punctuation_type AMPERSAND_AMPERSAND = new punctuation_type(new base_string("&&"), base_symbols.AMPERSAND_AMPERSAND);
  public static final punctuation_type VERTICAL_BAR_VERTICAL_BAR = new punctuation_type(new base_string("||"), base_symbols.VERTICAL_BAR_VERTICAL_BAR);
  public static final punctuation_type PLUS_EQUALS = new punctuation_type(new base_string("+="), base_symbols.PLUS_EQUALS);
  public static final punctuation_type MINUS_EQUALS = new punctuation_type(new base_string("-="), base_symbols.MINUS_EQUALS);
  public static final punctuation_type ASTERISK_EQUALS = new punctuation_type(new base_string("*="), base_symbols.ASTERISK_EQUALS);
  public static final punctuation_type MINUS_MINUS_MINUS = new punctuation_type(new base_string("---"));
  public static final punctuation_type COLON_COLON_EQUALS = new punctuation_type(new base_string("::="), base_symbols.COLON_COLON_EQUALS);
}
