// Autogenerated from development/origins/source_content.i

package ideal.development.origins;

import ideal.library.elements.*;
import ideal.library.texts.*;
import ideal.library.channels.*;
import ideal.library.resources.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;
import ideal.runtime.texts.*;
import ideal.runtime.patterns.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;

import javax.annotation.Nullable;

public class source_content extends debuggable implements deeply_immutable_data, origin, stringable {
  public final identifier name;
  public final string content;
  public source_content(final resource_identifier module_id) {
    this.name = module_id;
    this.content = module_id.access_string(null).content().get();
  }
  public source_content(final identifier name, final string content) {
    this.name = name;
    this.content = content;
  }
  public @Override @Nullable origin deeper_origin() {
    return null;
  }
  public origin make_origin(final int begin, final int end) {
    return new text_origin(this, begin, end);
  }
  public int line_number(final text_origin the_text_origin) {
    assert the_text_origin.source == this;
    assert the_text_origin.begin <= this.content.size();
    int count = 0;
    for (int i = 0; i < the_text_origin.begin; i += 1) {
      if (this.content.get(i) == '\n') {
        count += 1;
      }
    }
    return count + 1;
  }
  public @Override string to_string() {
    return utilities.describe(this, this.name);
  }
}
