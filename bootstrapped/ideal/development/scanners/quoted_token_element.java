// Autogenerated from development/scanners/quoted_token_element.i

package ideal.development.scanners;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;
import ideal.runtime.characters.*;
import ideal.runtime.patterns.*;
import ideal.runtime.logs.*;
import ideal.machine.characters.*;
import ideal.machine.channels.string_writer;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.notifications.*;
import ideal.development.origins.*;
import ideal.development.comments.*;
import ideal.development.literals.*;
import ideal.development.modifiers.*;
import ideal.development.constructs.constraint_category;
import ideal.development.jumps.jump_category;

import javax.annotation.Nullable;

public class quoted_token_element extends base_scanner_element {
  private final quote_type the_quote_type;
  public quoted_token_element(final quote_type the_quote_type) {
    this.the_quote_type = the_quote_type;
  }
  private char quote_character() {
    return this.the_quote_type.quote_character;
  }
  public @Override @Nullable scan_state process(final source_content source, final Integer begin) {
    final string input = source.content;
    if (input.get(begin) != this.quote_character()) {
      return null;
    }
    final base_list<literal_fragment> result = new base_list<literal_fragment>();
    final string_writer value = new string_writer();
    Integer start_index = begin + 1;
    Integer index = start_index;
    for (; index < input.size(); index += 1) {
      char the_character = input.get(index);
      if (the_character == this.quote_character()) {
        break;
      }
      if (the_character == quoted_character.ESCAPE) {
        if (start_index < index) {
          result.append(new string_fragment(input.slice(start_index, index)));
        }
        index += 1;
        assert index < input.size();
        the_character = input.get(index);
        boolean found = false;
        {
          final readonly_list<quoted_character> quoted_list = quoted_character.java_list;
          for (Integer quoted_index = 0; quoted_index < quoted_list.size(); quoted_index += 1) {
            final quoted_character quoted = quoted_list.get(quoted_index);
            if (the_character == quoted.name_character) {
              the_character = quoted.value_character;
              result.append(new quoted_fragment(quoted));
              start_index = index + 1;
              found = true;
              break;
            }
          }
        }
        if (!found) {
          utilities.panic(ideal.machine.elements.runtime_util.concatenate(new base_string("Unknown quoted char "), the_character));
          return null;
        }
      }
      value.write(the_character);
    }
    if (start_index < index) {
      result.append(new string_fragment(input.slice(start_index, index)));
    }
    Integer image_end;
    if (ideal.machine.elements.runtime_util.values_equal(index, input.size())) {
      final origin start_origin = source.make_origin(begin, begin + 1);
      final origin eof_origin = source.make_origin(index, index);
      final notification open_message = new base_notification(messages.opening_quote, start_origin);
      new base_notification(messages.quote_not_found, eof_origin, new base_immutable_list<notification>(new ideal.machine.elements.array<notification>(new notification[]{ open_message }))).report();
      image_end = index;
    } else {
      image_end = index + 1;
    }
    final origin the_origin = source.make_origin(begin, image_end);
    final string_literal the_string_literal = new string_literal(value.elements(), result.frozen_copy(), this.the_quote_type);
    return new scan_state(new base_token<string_literal>(special_token_type.LITERAL, the_string_literal, the_origin), begin + 1, image_end);
  }
}
