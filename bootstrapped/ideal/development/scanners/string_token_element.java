// Autogenerated from development/scanners/string_token_element.i

package ideal.development.scanners;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;
import ideal.runtime.characters.*;
import ideal.runtime.patterns.*;
import ideal.runtime.logs.*;
import ideal.machine.characters.*;
import ideal.machine.channels.string_writer;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.notifications.*;
import ideal.development.origins.*;
import ideal.development.comments.*;
import ideal.development.literals.*;
import ideal.development.modifiers.*;
import ideal.development.constructs.constraint_category;
import ideal.development.jumps.jump_category;

import javax.annotation.Nullable;

public class string_token_element<payload_type> extends base_scanner_element {
  protected final punctuation_type the_punctuation;
  protected final token_type the_type;
  protected final payload_type the_payload;
  protected final pattern<Character> punctuation_pattern;
  public string_token_element(final punctuation_type the_punctuation, final token_type the_type, final payload_type the_payload) {
    this.the_punctuation = the_punctuation;
    this.the_type = the_type;
    this.the_payload = the_payload;
    this.punctuation_pattern = new list_pattern<Character>(the_punctuation.name());
  }
  public @Override @Nullable scan_state process(final source_content source, final Integer begin) {
    final string input = source.content;
    final @Nullable Integer match = this.punctuation_pattern.match_prefix(input.skip(begin));
    if (match == null) {
      return null;
    }
    final Integer end = begin + match;
    final origin the_origin = source.make_origin(begin, end);
    return new scan_state(new base_token<payload_type>(this.the_type, this.the_payload, the_origin), end, end);
  }
}
