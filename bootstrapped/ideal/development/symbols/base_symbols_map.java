// Autogenerated from development/symbols/base_symbols_map.i

package ideal.development.symbols;

import ideal.library.elements.*;
import ideal.runtime.elements.*;

public class base_symbols_map {
  public static final dictionary<string, Integer> symbols_map = new hash_dictionary<string, Integer>();
  static {
    base_symbols_map.symbols_map.put(new base_string("MINUS_EQUALS"), 42);
    base_symbols_map.symbols_map.put(new base_string("LESS_THAN"), 22);
    base_symbols_map.symbols_map.put(new base_string("PLEASE"), 67);
    base_symbols_map.symbols_map.put(new base_string("GREATER_THAN"), 23);
    base_symbols_map.symbols_map.put(new base_string("TARGET"), 66);
    base_symbols_map.symbols_map.put(new base_string("CLOSE_BRACKET"), 5);
    base_symbols_map.symbols_map.put(new base_string("COMMA"), 9);
    base_symbols_map.symbols_map.put(new base_string("EXCLAMATION_MARK"), 16);
    base_symbols_map.symbols_map.put(new base_string("EQUALS_EQUALS"), 32);
    base_symbols_map.symbols_map.put(new base_string("SIMPLE_NAME"), 51);
    base_symbols_map.symbols_map.put(new base_string("EXCLAMATION_GREATER_THAN"), 30);
    base_symbols_map.symbols_map.put(new base_string("LOOP"), 48);
    base_symbols_map.symbols_map.put(new base_string("LITERAL"), 14);
    base_symbols_map.symbols_map.put(new base_string("PLUS_EQUALS"), 41);
    base_symbols_map.symbols_map.put(new base_string("QUESTION_MARK_GREATER_THAN"), 31);
    base_symbols_map.symbols_map.put(new base_string("MODIFIER_KIND"), 53);
    base_symbols_map.symbols_map.put(new base_string("PLUS_PLUS"), 15);
    base_symbols_map.symbols_map.put(new base_string("JUMP"), 58);
    base_symbols_map.symbols_map.put(new base_string("SUBTYPE_TAG"), 57);
    base_symbols_map.symbols_map.put(new base_string("CLOSE_BRACE"), 7);
    base_symbols_map.symbols_map.put(new base_string("OPEN_BRACKET"), 4);
    base_symbols_map.symbols_map.put(new base_string("AMPERSAND_AMPERSAND"), 37);
    base_symbols_map.symbols_map.put(new base_string("FLAVOR"), 55);
    base_symbols_map.symbols_map.put(new base_string("SLASH"), 20);
    base_symbols_map.symbols_map.put(new base_string("PLUS"), 17);
    base_symbols_map.symbols_map.put(new base_string("PERCENT"), 21);
    base_symbols_map.symbols_map.put(new base_string("IS_NOT"), 28);
    base_symbols_map.symbols_map.put(new base_string("WHILE"), 49);
    base_symbols_map.symbols_map.put(new base_string("USE"), 65);
    base_symbols_map.symbols_map.put(new base_string("GRAMMAR"), 68);
    base_symbols_map.symbols_map.put(new base_string("SWITCH"), 61);
    base_symbols_map.symbols_map.put(new base_string("FOR"), 50);
    base_symbols_map.symbols_map.put(new base_string("LESS_THAN_EQUALS_GREATER_THAN"), 26);
    base_symbols_map.symbols_map.put(new base_string("RETURN"), 45);
    base_symbols_map.symbols_map.put(new base_string("ELSE"), 47);
    base_symbols_map.symbols_map.put(new base_string("ASTERISK"), 19);
    base_symbols_map.symbols_map.put(new base_string("DOT_GREATER_THAN"), 29);
    base_symbols_map.symbols_map.put(new base_string("DOT"), 8);
    base_symbols_map.symbols_map.put(new base_string("AMPERSAND"), 34);
    base_symbols_map.symbols_map.put(new base_string("ASTERISK_EQUALS"), 43);
    base_symbols_map.symbols_map.put(new base_string("OPEN_PARENTHESIS"), 2);
    base_symbols_map.symbols_map.put(new base_string("EOF"), 0);
    base_symbols_map.symbols_map.put(new base_string("SEMICOLON"), 12);
    base_symbols_map.symbols_map.put(new base_string("COMMENT"), 54);
    base_symbols_map.symbols_map.put(new base_string("KIND"), 56);
    base_symbols_map.symbols_map.put(new base_string("DEFAULT"), 63);
    base_symbols_map.symbols_map.put(new base_string("IMPORT"), 60);
    base_symbols_map.symbols_map.put(new base_string("IS"), 27);
    base_symbols_map.symbols_map.put(new base_string("MINUS"), 18);
    base_symbols_map.symbols_map.put(new base_string("TERMINAL"), 69);
    base_symbols_map.symbols_map.put(new base_string("OR"), 39);
    base_symbols_map.symbols_map.put(new base_string("error"), 1);
    base_symbols_map.symbols_map.put(new base_string("IF"), 46);
    base_symbols_map.symbols_map.put(new base_string("COLON"), 11);
    base_symbols_map.symbols_map.put(new base_string("NONTERMINAL"), 70);
    base_symbols_map.symbols_map.put(new base_string("CARET"), 35);
    base_symbols_map.symbols_map.put(new base_string("OPEN_BRACE"), 6);
    base_symbols_map.symbols_map.put(new base_string("PLUS_PLUS_EQUALS"), 44);
    base_symbols_map.symbols_map.put(new base_string("VERTICAL_BAR"), 36);
    base_symbols_map.symbols_map.put(new base_string("CASE"), 62);
    base_symbols_map.symbols_map.put(new base_string("SPECIAL_NAME"), 52);
    base_symbols_map.symbols_map.put(new base_string("QUESTION_MARK"), 40);
    base_symbols_map.symbols_map.put(new base_string("COLON_COLON_EQUALS"), 71);
    base_symbols_map.symbols_map.put(new base_string("GREATER_THAN_EQUALS"), 25);
    base_symbols_map.symbols_map.put(new base_string("CLOSE_PARENTHESIS"), 3);
    base_symbols_map.symbols_map.put(new base_string("EQUALS_GREATER_THAN"), 13);
    base_symbols_map.symbols_map.put(new base_string("CONSTRAINT"), 59);
    base_symbols_map.symbols_map.put(new base_string("EQUALS"), 10);
    base_symbols_map.symbols_map.put(new base_string("VERTICAL_BAR_VERTICAL_BAR"), 38);
    base_symbols_map.symbols_map.put(new base_string("EXCLAMATION_MARK_EQUALS"), 33);
    base_symbols_map.symbols_map.put(new base_string("HASH"), 64);
    base_symbols_map.symbols_map.put(new base_string("LESS_THAN_EQUALS"), 24);
  }
}
