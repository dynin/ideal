// Autogenerated from development/texts/text_rewriter.i

package ideal.development.texts;

import ideal.library.elements.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.runtime.texts.*;

import javax.annotation.Nullable;

public abstract class text_rewriter extends text_visitor<text_fragment> {
  public text_fragment rewrite(final text_fragment fragment) {
    return process(fragment);
  }
  protected abstract text_fragment rewrite_element(element_id id, immutable_dictionary<attribute_id, string> attributes, @Nullable text_fragment children);
  protected @Override text_fragment process_string(final string s) {
    return (base_string) s;
  }
  protected @Override text_fragment process_element(final text_element element) {
    @Nullable text_fragment children = element.children();
    if (children != null) {
      children = rewrite(children);
    }
    return rewrite_element(element.get_id(), element.attributes(), children);
  }
  protected @Override text_fragment process_special(final special_text t) {
    return t;
  }
  protected @Override text_fragment process_nodes(final list_text_node nodes) {
    final immutable_list<text_node> source = nodes.nodes();
    final base_list<text_fragment> result = new base_list<text_fragment>();
    for (int i = 0; i < source.size(); i += 1) {
      result.append(process(source.get(i)));
    }
    return text_util.join(result);
  }
}
