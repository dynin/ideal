// Autogenerated from development/types/base_type.i

package ideal.development.types;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;

import javax.annotation.Nullable;

public abstract class base_type extends debuggable implements type {
  public @Override type type_bound() {
    return this;
  }
  public @Override action to_action(final origin the_origin) {
    return new concrete_type_action(this, the_origin);
  }
  protected static type do_get_flavored(final base_principal_type the_type, final type_flavor new_flavor) {
    final type_flavor_impl the_flavor = (type_flavor_impl) new_flavor;
    if (the_flavor == flavor.nameonly_flavor) {
      return the_type;
    }
    @Nullable type flavored = the_flavor.types.get(the_type);
    if (flavored == null) {
      flavored = new flavored_type(the_type, the_flavor);
      the_flavor.types.put(the_type, ((flavored_type) flavored));
    }
    return flavored;
  }
  abstract type_declaration_context declaration_context();
  public abstract string describe(type_format format);
  public @Override boolean is_parametrizable() {
    return this.declaration_context().is_parametrizable(this);
  }
  public @Override boolean is_subtype_of(final type the_supertype) {
    return this.declaration_context().is_subtype_of(this, the_supertype);
  }
  public base_type() { }
}
