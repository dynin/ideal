// Autogenerated from development/types/flavored_type.i

package ideal.development.types;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;

public class flavored_type extends base_type {
  private final base_principal_type main_type;
  private final type_flavor the_type_flavor;
  public flavored_type(final base_principal_type main_type, final type_flavor the_type_flavor) {
    this.main_type = main_type;
    this.the_type_flavor = the_type_flavor;
    if (main_type.get_kind() == type_kinds.union_kind) {
      utilities.panic(ideal.machine.elements.runtime_util.concatenate(new base_string("Flavored union "), this));
      return;
    }
  }
  public @Override principal_type principal() {
    return this.main_type;
  }
  public @Override identifier short_name() {
    return this.main_type.short_name();
  }
  public @Override type get_flavored(type_flavor new_flavor) {
    new_flavor = this.main_type.get_flavor_profile().map(new_flavor);
    if (new_flavor == this.the_type_flavor) {
      return this;
    }
    return base_type.do_get_flavored(this.main_type, new_flavor);
  }
  public @Override type_flavor get_flavor() {
    return this.the_type_flavor;
  }
  protected @Override type_declaration_context get_context() {
    return this.main_type.get_context();
  }
  public @Override string describe(final type_format format) {
    return ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(this.the_type_flavor.to_string(), new base_string(" ")), this.main_type.describe(format));
  }
  public @Override string to_string() {
    return this.describe(type_format.FULL);
  }
}
