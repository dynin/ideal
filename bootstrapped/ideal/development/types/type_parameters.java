// Autogenerated from development/types/type_parameters.i

package ideal.development.types;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.machine.channels.string_writer;

public class type_parameters extends debuggable implements deeply_immutable_data {
  public final immutable_list<abstract_value> the_list;
  public type_parameters(final readonly_list<abstract_value> the_list) {
    this.the_list = the_list.frozen_copy();
  }
  public @Override string to_string() {
    final string_writer the_writer = new string_writer();
    the_writer.write_all(new base_string("["));
    for (Integer i = 0; i < this.the_list.size(); i += 1) {
      if (i > 0) {
        the_writer.write_all(new base_string(", "));
      }
      final abstract_value parameter = this.the_list.get(i);
      string name;
      if (parameter instanceof base_type) {
        name = ((base_type) parameter).describe(type_format.TWO_PARENTS);
      } else {
        name = parameter.to_string();
      }
      the_writer.write_all(name);
    }
    the_writer.write_all(new base_string("]"));
    return the_writer.elements();
  }
}
