// Autogenerated from development/types/type_utilities.i

package ideal.development.types;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.development.origins.special_origin;

import javax.annotation.Nullable;

public class type_utilities {
  public static final origin PRIMARY_TYPE_ORIGIN = new special_origin(new base_string("[primary_type]"));
  public static immutable_list<simple_name> get_full_names(@Nullable principal_type the_type) {
    final base_list<simple_name> names = new base_list<simple_name>();
    while (the_type != null) {
      final action_name name = the_type.short_name();
      if (name instanceof simple_name) {
        names.append(((simple_name) name));
      }
      the_type = the_type.get_parent();
    }
    return names.frozen_copy().reverse();
  }
  public static type make_union(final readonly_list<abstract_value> parameters) {
    return union_type.make_union(new type_parameters(parameters));
  }
  public static boolean is_union(final type the_type) {
    return the_type.principal() instanceof union_type;
  }
  public static immutable_list<abstract_value> get_union_parameters(final type the_type) {
    assert type_utilities.is_union(the_type);
    return ((union_type) the_type.principal()).get_parameters().the_list;
  }
  public static boolean is_type_alias(final type the_type) {
    return the_type.principal().get_kind() == type_kinds.type_alias_kind;
  }
  public static flavor_profile get_flavor_profile(final principal_type the_type) {
    final base_principal_type the_principal = (base_principal_type) the_type;
    if (!the_principal.has_flavor_profile()) {
      if (!the_principal.get_pass().is_before(declaration_pass.FLAVOR_PROFILE)) {
        {
          utilities.panic(ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(new base_string("P "), the_principal.get_pass()), new base_string(" of ")), the_principal));
          return null;
        }
      }
      assert the_principal.get_pass().is_before(declaration_pass.FLAVOR_PROFILE);
      the_principal.process_declaration(declaration_pass.FLAVOR_PROFILE);
    }
    return the_principal.get_flavor_profile();
  }
  public static void prepare(final abstract_value the_value, final declaration_pass pass) {
    ((base_principal_type) the_value.type_bound().principal()).process_declaration(pass);
  }
}
