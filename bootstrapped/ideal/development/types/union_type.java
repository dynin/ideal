// Autogenerated from development/types/union_type.i

package ideal.development.types;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.logs.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;

import javax.annotation.Nullable;

public class union_type extends base_principal_type {
  private static final special_name union_name = new special_name(new base_string("union"));
  private static final dictionary<type_parameters, union_type> cached_types = new hash_dictionary<type_parameters, union_type>();
  private static @Nullable type_declaration_context the_context;
  private final type_parameters parameters;
  private union_type(final type_parameters parameters) {
    super(null, declaration_pass.NONE, null);
    this.parameters = parameters;
  }
  public static union_type make_union(final type_parameters parameters) {
    assert parameters != null;
    @Nullable union_type result = union_type.cached_types.get(parameters);
    if (result == null) {
      result = new union_type(parameters);
      union_type.cached_types.put(parameters, result);
    }
    return result;
  }
  public type_parameters get_parameters() {
    return this.parameters;
  }
  public @Override kind get_kind() {
    return type_kinds.union_kind;
  }
  public @Override action_name short_name() {
    return union_type.union_name;
  }
  public @Override @Nullable principal_type get_parent() {
    return null;
  }
  public @Override type get_flavored(final type_flavor flavor) {
    final base_list<abstract_value> new_parameters = new base_list<abstract_value>();
    {
      final readonly_list<abstract_value> the_parameter_list = this.parameters.the_list;
      for (Integer the_parameter_index = 0; the_parameter_index < the_parameter_list.size(); the_parameter_index += 1) {
        final abstract_value the_parameter = the_parameter_list.get(the_parameter_index);
        if (the_parameter instanceof type) {
          new_parameters.append(((type) the_parameter).get_flavored(flavor));
        } else {
          new_parameters.append(the_parameter);
        }
      }
    }
    return union_type.make_union(new type_parameters(new_parameters));
  }
  public @Override flavor_profile get_flavor_profile() {
    @Nullable flavor_profile result = this.the_flavor_profile;
    if (result == null) {
      result = this.default_flavor_profile();
      this.the_flavor_profile = result;
    }
    return result;
  }
  public @Override flavor_profile default_flavor_profile() {
    flavor_profile result = flavor_profiles.mutable_profile;
    {
      final readonly_list<abstract_value> the_parameter_list = this.parameters.the_list;
      for (Integer the_parameter_index = 0; the_parameter_index < the_parameter_list.size(); the_parameter_index += 1) {
        final abstract_value the_parameter = the_parameter_list.get(the_parameter_index);
        final flavor_profile profile = type_utilities.get_flavor_profile(the_parameter.type_bound().principal());
        result = flavor_profiles.combine(result, profile);
      }
    }
    return result;
  }
  protected @Override void do_declare_actual(final declaration_pass pass) {
    final readonly_list<abstract_value> the_parameter_list = this.parameters.the_list;
    for (Integer the_parameter_index = 0; the_parameter_index < the_parameter_list.size(); the_parameter_index += 1) {
      final abstract_value the_parameter = the_parameter_list.get(the_parameter_index);
      type_utilities.prepare(the_parameter, pass);
    }
  }
  protected @Override type_declaration_context get_context() {
    assert union_type.the_context instanceof type_declaration_context;
    return union_type.the_context;
  }
  public static void set_context(final type_declaration_context the_context) {
    assert union_type.the_context == null;
    union_type.the_context = the_context;
  }
  public @Override string describe(final type_format format) {
    if (format == type_format.FULL) {
      return ideal.machine.elements.runtime_util.concatenate(union_type.union_name, this.parameters);
    } else {
      return ideal.machine.elements.runtime_util.concatenate(union_type.union_name, new base_string("[...]"));
    }
  }
}
