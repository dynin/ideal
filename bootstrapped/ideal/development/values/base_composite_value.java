// Autogenerated from development/values/base_composite_value.i

package ideal.development.values;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.reflections.*;
import ideal.development.elements.*;
import ideal.development.origins.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.development.types.*;
import ideal.development.jumps.*;
import ideal.development.notifications.*;
import ideal.development.flags.*;

import javax.annotation.Nullable;

public class base_composite_value extends debuggable implements composite_wrapper, any_composite_value {
  private final type bound;
  private final dictionary<variable_id, value_wrapper> bindings;
  public base_composite_value(final type bound) {
    this.bound = bound;
    this.bindings = new hash_dictionary<variable_id, value_wrapper>();
  }
  public @Override type type_bound() {
    return this.bound;
  }
  public @Override any_composite_value unwrap() {
    return this;
  }
  public @Override void put_var(final variable_id key, final value_wrapper value) {
    this.bindings.put(key, value);
    return;
  }
  public @Override value_wrapper get_var(final variable_id key) {
    final @Nullable value_wrapper result = this.bindings.get(key);
    assert result != null;
    return result;
  }
  public string to_string() {
    return ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(new base_string("(composite)"), this.type_bound()), new base_string(":{")), utilities.string_of(this.bindings)), new base_string("}"));
  }
}
