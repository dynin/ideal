// Autogenerated from development/values/bound_procedure.i

package ideal.development.values;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.reflections.*;
import ideal.development.elements.*;
import ideal.development.origins.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.development.types.*;
import ideal.development.jumps.*;
import ideal.development.notifications.*;
import ideal.development.flags.*;

import javax.annotation.Nullable;

public class bound_procedure extends debuggable implements action, stringable {
  private final origin the_origin;
  public final action the_procedure_action;
  public final action_parameters parameters;
  public final abstract_value return_value;
  public bound_procedure(final action the_procedure_action, final abstract_value return_value, final action_parameters parameters, final origin the_origin) {
    assert the_origin != null;
    this.the_origin = the_origin;
    this.the_procedure_action = the_procedure_action;
    this.return_value = return_value;
    this.parameters = parameters;
  }
  public bound_procedure(final procedure_value the_procedure_value, final abstract_value return_value, final action_parameters parameters, final origin the_origin) {
    this(the_procedure_value.to_action(the_origin), return_value, parameters, the_origin);
  }
  public @Override origin deeper_origin() {
    return this.the_origin;
  }
  public @Override action to_action() {
    return this;
  }
  public @Override abstract_value result() {
    return this.return_value;
  }
  public @Override @Nullable declaration get_declaration() {
    return this.the_procedure_action.get_declaration();
  }
  public @Override boolean has_side_effects() {
    if (this.the_procedure_action.has_side_effects()) {
      return true;
    }
    final @Nullable declaration the_declaration = this.the_procedure_action.get_declaration();
    if (the_declaration instanceof procedure_declaration) {
      if (!((procedure_declaration) the_declaration).is_pure()) {
        return true;
      }
    }
    {
      final readonly_list<action> parameter_list = this.parameters.parameters;
      for (Integer parameter_index = 0; parameter_index < parameter_list.size(); parameter_index += 1) {
        final action parameter = parameter_list.get(parameter_index);
        if (parameter.has_side_effects()) {
          return true;
        }
      }
    }
    return false;
  }
  public @Override action combine(final action from, final origin new_origin) {
    return new bound_procedure(this.the_procedure_action.combine(from, new_origin), this.return_value, this.parameters, new_origin);
  }
  public @Override entity_wrapper execute(final entity_wrapper from_entity, final execution_context the_execution_context) {
    final entity_wrapper the_entity = this.the_procedure_action.execute(from_entity, the_execution_context);
    if (the_entity instanceof jump_wrapper) {
      return ((jump_wrapper) the_entity);
    }
    assert the_entity instanceof procedure_value;
    final procedure_value the_procedure_value = ((procedure_value) the_entity);
    final base_list<entity_wrapper> concrete_values = new base_list<entity_wrapper>();
    {
      final readonly_list<action> parameter_list = this.parameters.parameters;
      for (Integer parameter_index = 0; parameter_index < parameter_list.size(); parameter_index += 1) {
        final action parameter = parameter_list.get(parameter_index);
        assert !(parameter instanceof error_signal);
        final entity_wrapper concrete_value = parameter.execute(null_wrapper.instance, the_execution_context);
        if (concrete_value instanceof jump_wrapper) {
          return ((jump_wrapper) concrete_value);
        }
        concrete_values.append(concrete_value);
      }
    }
    return the_procedure_value.execute(from_entity, concrete_values, the_execution_context);
  }
  public @Override string to_string() {
    return utilities.describe(this, this.the_procedure_action);
  }
}
