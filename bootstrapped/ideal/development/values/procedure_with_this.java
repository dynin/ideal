// Autogenerated from development/values/procedure_with_this.i

package ideal.development.values;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.reflections.*;
import ideal.development.elements.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.development.types.*;
import ideal.development.jumps.*;
import ideal.development.notifications.*;
import ideal.development.flags.*;

import javax.annotation.Nullable;

public class procedure_with_this extends base_data_value implements procedure_value {
  private final procedure_value the_procedure;
  public final @Nullable entity_wrapper this_entity;
  public final @Nullable action this_action;
  public procedure_with_this(final procedure_value the_procedure, final action this_action) {
    super(the_procedure.type_bound());
    this.the_procedure = the_procedure;
    this.this_entity = null;
    assert this_action != null;
    this.this_action = this_action;
    assert the_procedure.has_this_argument();
  }
  public procedure_with_this(final procedure_value the_procedure, final entity_wrapper this_entity) {
    super(the_procedure.type_bound());
    this.the_procedure = the_procedure;
    assert this_entity != null;
    this.this_entity = this_entity;
    this.this_action = null;
    assert the_procedure.has_this_argument();
  }
  public @Override action_name name() {
    return this.the_procedure.name();
  }
  public @Override @Nullable declaration get_declaration() {
    return this.the_procedure.get_declaration();
  }
  public @Override boolean has_this_argument() {
    return false;
  }
  public @Override procedure_value bind_this(final entity_wrapper this_argument) {
    return new procedure_with_this(this, this_argument);
  }
  public @Override action bind_this_action(final action from, final origin the_origin) {
    assert this.this_action != null;
    return new procedure_with_this(this.the_procedure, this.this_action.combine(from, the_origin)).to_action(the_origin);
  }
  public @Override boolean supports_parameters(final action_parameters parameters, final action_context context) {
    return this.the_procedure.supports_parameters(parameters, context);
  }
  public @Override analysis_result bind_parameters(final action_parameters params, final action_context context, final origin the_origin) {
    final analysis_result bound_procedure = this.the_procedure.bind_parameters(params, context, the_origin);
    if (bound_procedure instanceof error_signal) {
      return ((error_signal) bound_procedure);
    }
    assert bound_procedure instanceof action;
    assert this.this_action != null;
    return ((action) bound_procedure).combine(this.this_action, the_origin);
  }
  public @Override entity_wrapper execute(final entity_wrapper from_entity, final readonly_list<entity_wrapper> arguments, final execution_context the_execution_context) {
    assert from_entity != null;
    entity_wrapper this_value;
    if (this.this_entity != null) {
      this_value = this.this_entity;
    } else {
      if (this.this_action != null) {
        this_value = this.this_action.execute(null_wrapper.instance, the_execution_context);
      } else {
        this_value = from_entity;
      }
    }
    if (this_value instanceof jump_wrapper) {
      return ((jump_wrapper) this_value);
    }
    return this.the_procedure.execute(this_value, arguments, the_execution_context);
  }
  public @Override string to_string() {
    return utilities.describe(this, this.the_procedure);
  }
}
