// Autogenerated from development/values/singleton_value.i

package ideal.development.values;

import ideal.library.elements.*;
import ideal.library.reflections.*;
import ideal.runtime.elements.*;
import ideal.runtime.reflections.*;
import ideal.development.elements.*;
import ideal.development.origins.*;
import ideal.development.names.*;
import ideal.development.flavors.*;
import ideal.development.declarations.*;
import ideal.development.kinds.*;
import ideal.development.types.*;
import ideal.development.jumps.*;
import ideal.development.notifications.*;
import ideal.development.flags.*;

public class singleton_value extends base_data_value {
  public singleton_value(final principal_type singleton_type) {
    super(singleton_type.get_flavored(flavor.deeply_immutable_flavor));
    if (singleton_type.get_kind() != type_kinds.singleton_kind) {
      utilities.panic(ideal.machine.elements.runtime_util.concatenate(new base_string("Not a singleton type: "), singleton_type));
      return;
    }
  }
  public @Override string to_string() {
    return ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(this.type_bound(), new base_string(".")), common_names.instance_name);
  }
}
