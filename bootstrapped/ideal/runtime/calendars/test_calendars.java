// Autogenerated from runtime/calendars/test_calendars.i

package ideal.runtime.calendars;

import ideal.library.elements.*;
import ideal.library.calendars.*;
import ideal.runtime.elements.*;
import ideal.machine.calendars.calendar_utilities.*;

public class test_calendars {
  public void test_months() {
    final gregorian_month jan = ideal.machine.calendars.calendar_utilities.month_of(0);
    assert ideal.machine.elements.runtime_util.values_equal(jan.ordinal(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(jan.index_base_1(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(jan.min_days(), 31);
    assert ideal.machine.elements.runtime_util.values_equal(jan.max_days(), 31);
    assert ideal.machine.elements.runtime_util.values_equal(jan.to_string(), new base_string("JANUARY"));
    assert ideal.machine.elements.runtime_util.values_equal(jan, ideal.machine.calendars.calendar_utilities.month_of(0));
    assert jan == base_gregorian_month.JANUARY;
    final gregorian_month feb = ideal.machine.calendars.calendar_utilities.month_of(1);
    assert ideal.machine.elements.runtime_util.values_equal(feb.ordinal(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(feb.index_base_1(), 2);
    assert ideal.machine.elements.runtime_util.values_equal(feb.min_days(), 28);
    assert ideal.machine.elements.runtime_util.values_equal(feb.max_days(), 29);
    assert ideal.machine.elements.runtime_util.values_equal(feb.to_string(), new base_string("FEBRUARY"));
    assert ideal.machine.elements.runtime_util.values_equal(feb, ideal.machine.calendars.calendar_utilities.month_of(1));
    assert feb == base_gregorian_month.FEBRUARY;
    final gregorian_month mar = ideal.machine.calendars.calendar_utilities.month_of(2);
    assert ideal.machine.elements.runtime_util.values_equal(mar.ordinal(), 2);
    assert ideal.machine.elements.runtime_util.values_equal(mar.index_base_1(), 3);
    assert ideal.machine.elements.runtime_util.values_equal(mar.min_days(), 31);
    assert ideal.machine.elements.runtime_util.values_equal(mar.max_days(), 31);
    assert ideal.machine.elements.runtime_util.values_equal(mar.to_string(), new base_string("MARCH"));
    assert ideal.machine.elements.runtime_util.values_equal(mar, ideal.machine.calendars.calendar_utilities.month_of(2));
    assert mar == base_gregorian_month.MARCH;
    final gregorian_month nov = ideal.machine.calendars.calendar_utilities.month_of(10);
    assert ideal.machine.elements.runtime_util.values_equal(nov.ordinal(), 10);
    assert ideal.machine.elements.runtime_util.values_equal(nov.index_base_1(), 11);
    assert ideal.machine.elements.runtime_util.values_equal(nov.min_days(), 30);
    assert ideal.machine.elements.runtime_util.values_equal(nov.max_days(), 30);
    assert ideal.machine.elements.runtime_util.values_equal(nov.to_string(), new base_string("NOVEMBER"));
    assert ideal.machine.elements.runtime_util.values_equal(nov, ideal.machine.calendars.calendar_utilities.month_of(10));
    assert nov == base_gregorian_month.NOVEMBER;
  }
  public void test_days() {
    final gregorian_day aug11 = ideal.machine.calendars.calendar_utilities.day_of(2021, base_gregorian_month.AUGUST, 11);
    assert ideal.machine.elements.runtime_util.values_equal(aug11.year(), 2021);
    assert aug11.month() == base_gregorian_month.AUGUST;
    assert ideal.machine.elements.runtime_util.values_equal(aug11.day(), 11);
    assert ideal.machine.elements.runtime_util.values_equal(aug11, ideal.machine.calendars.calendar_utilities.day_of(2021, base_gregorian_month.AUGUST, 11));
    final gregorian_day mar30 = ideal.machine.calendars.calendar_utilities.day_of(1993, base_gregorian_month.MARCH, 30);
    assert ideal.machine.elements.runtime_util.values_equal(mar30.year(), 1993);
    assert mar30.month() == base_gregorian_month.MARCH;
    assert ideal.machine.elements.runtime_util.values_equal(mar30.day(), 30);
    assert ideal.machine.elements.runtime_util.values_equal(mar30, ideal.machine.calendars.calendar_utilities.day_of(1993, base_gregorian_month.MARCH, 30));
    final gregorian_day feb28 = ideal.machine.calendars.calendar_utilities.day_of(2016, base_gregorian_month.FEBRUARY, 28);
    assert ideal.machine.elements.runtime_util.values_equal(feb28, ideal.machine.calendars.calendar_utilities.day_of(2016, base_gregorian_month.FEBRUARY, 28));
    assert ideal.machine.elements.runtime_util.values_equal(feb28.add_days(1), ideal.machine.calendars.calendar_utilities.day_of(2016, base_gregorian_month.FEBRUARY, 29));
    assert ideal.machine.elements.runtime_util.values_equal(feb28.add_days(2), ideal.machine.calendars.calendar_utilities.day_of(2016, base_gregorian_month.MARCH, 1));
    final gregorian_day jan1 = ideal.machine.calendars.calendar_utilities.day_of(2000, base_gregorian_month.JANUARY, 1);
    assert ideal.machine.elements.runtime_util.values_equal(jan1, ideal.machine.calendars.calendar_utilities.day_of(2000, base_gregorian_month.JANUARY, 1));
    assert ideal.machine.elements.runtime_util.values_equal(jan1.add_days(-1), ideal.machine.calendars.calendar_utilities.day_of(1999, base_gregorian_month.DECEMBER, 31));
    assert ideal.machine.elements.runtime_util.values_equal(jan1.add_days(-365), ideal.machine.calendars.calendar_utilities.day_of(1999, base_gregorian_month.JANUARY, 1));
    assert ideal.machine.elements.runtime_util.values_equal(jan1.add_days(-365 * 2), ideal.machine.calendars.calendar_utilities.day_of(1998, base_gregorian_month.JANUARY, 1));
  }
  public void test_equivalence() {
    final gregorian_day day0 = ideal.machine.calendars.calendar_utilities.today();
    final gregorian_day day1 = ideal.machine.calendars.calendar_utilities.day_of(day0.year(), day0.month(), day0.day());
    assert ideal.machine.elements.runtime_util.values_equal(day0, day1);
  }
  public test_calendars() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_calendars.test_months"));
    this.test_months();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_calendars.test_days"));
    this.test_days();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_calendars.test_equivalence"));
    this.test_equivalence();
    ideal.machine.elements.runtime_util.end_test();
  }
}
