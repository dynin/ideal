// Autogenerated from runtime/characters/test_character_handler.i

package ideal.runtime.characters;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.runtime.elements.*;
import ideal.machine.characters.unicode_handler;

public class test_character_handler {
  public void predicate_test() {
    final unicode_handler the_character_handler = unicode_handler.instance;
    assert the_character_handler.is_letter('x');
    assert !the_character_handler.is_letter('6');
    assert the_character_handler.is_letter_or_digit('x');
    assert the_character_handler.is_letter_or_digit('8');
    assert !the_character_handler.is_letter_or_digit(' ');
    assert the_character_handler.is_whitespace(' ');
    assert !the_character_handler.is_whitespace('x');
    assert !the_character_handler.is_whitespace('4');
    assert the_character_handler.is_upper_case('X');
    assert !the_character_handler.is_upper_case('x');
    assert !the_character_handler.is_upper_case('5');
    assert the_character_handler.is_digit('0');
    assert the_character_handler.is_digit('5');
    assert !the_character_handler.is_digit('x');
    assert !the_character_handler.is_digit('?');
  }
  public void digit_test() {
    assert ideal.machine.elements.runtime_util.values_equal(radixes.MINIMUM_RADIX, 2);
    assert ideal.machine.elements.runtime_util.values_equal(radixes.DEFAULT_RADIX, 10);
    assert ideal.machine.elements.runtime_util.values_equal(radixes.MAXIMUM_RADIX, 36);
    final unicode_handler the_character_handler = unicode_handler.instance;
    assert ideal.machine.elements.runtime_util.values_equal(the_character_handler.from_digit('0', radixes.DEFAULT_RADIX), 0);
    assert ideal.machine.elements.runtime_util.values_equal(the_character_handler.from_digit('5', radixes.DEFAULT_RADIX), 5);
    assert ideal.machine.elements.runtime_util.values_equal(the_character_handler.from_digit('F', 16), 15);
    assert the_character_handler.from_digit('X', 16) == null;
  }
  public void conversion_test() {
    final unicode_handler the_character_handler = unicode_handler.instance;
    assert the_character_handler.to_lower_case('X') == 'x';
    assert the_character_handler.to_lower_case('x') == 'x';
    assert the_character_handler.to_lower_case('5') == '5';
  }
  public void test_quoted_character() {
    final unicode_handler the_character_handler = unicode_handler.instance;
    {
      final readonly_list<quoted_character> the_quoted_character_list = quoted_character.all_list;
      for (Integer the_quoted_character_index = 0; the_quoted_character_index < the_quoted_character_list.size(); the_quoted_character_index += 1) {
        final quoted_character the_quoted_character = the_quoted_character_list.get(the_quoted_character_index);
        assert ideal.machine.elements.runtime_util.values_equal(the_character_handler.to_code(the_quoted_character.value_character), the_quoted_character.ascii_code);
      }
    }
  }
  public test_character_handler() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_character_handler.predicate_test"));
    this.predicate_test();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_character_handler.digit_test"));
    this.digit_test();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_character_handler.conversion_test"));
    this.conversion_test();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_character_handler.test_quoted_character"));
    this.test_quoted_character();
    ideal.machine.elements.runtime_util.end_test();
  }
}
