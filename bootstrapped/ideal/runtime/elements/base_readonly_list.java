// Autogenerated from runtime/elements/base_readonly_list.i

package ideal.runtime.elements;

import ideal.library.elements.*;
import ideal.machine.elements.array;

public class base_readonly_list<element_type> implements readonly_list<element_type> {
  public static class parameters {
    public static final Integer default_size = 16;
  }
  protected static class list_state<element_type> implements value {
    public boolean writable;
    public array<element_type> the_elements;
    public Integer size;
    public list_state(final Integer initial_size) {
      this.writable = true;
      this.the_elements = new array<element_type>(initial_size);
      this.size = 0;
    }
    public list_state() {
      this(base_readonly_list.parameters.default_size);
    }
    public list_state(final array<element_type> immutable_elements) {
      this.writable = false;
      this.the_elements = immutable_elements;
      this.size = immutable_elements.size;
    }
    public void reserve(final Integer reserve_size) {
      if (this.the_elements.size >= reserve_size) {
        return;
      }
      Integer new_size = this.the_elements.size * 2;
      if (new_size < reserve_size) {
        new_size = reserve_size;
      }
      final array<element_type> new_elements = new array<element_type>(new_size);
      this.the_elements.copy(0, ((array<Object>) (Object) new_elements), 0, this.size);
      this.the_elements = new_elements;
    }
    public void insert_all(final Integer index, final readonly_list<element_type> new_elements) {
      if (new_elements.is_empty()) {
        return;
      } else if (ideal.machine.elements.runtime_util.values_equal(new_elements.size(), 1)) {
        this.insert(index, new_elements.first());
        return;
      }
      assert this.writable;
      final Integer extra_size = new_elements.size();
      this.reserve_and_move(index, extra_size);
      final array<element_type> new_elements_array = ((base_readonly_list<element_type>) (Object) new_elements).state.the_elements;
      new_elements_array.copy(0, ((array<Object>) (Object) this.the_elements), index, extra_size);
    }
    public void insert(final Integer index, final element_type element) {
      assert this.writable;
      this.reserve_and_move(index, 1);
      this.the_elements.set(index, element);
    }
    private void reserve_and_move(final Integer index, final Integer extra_size) {
      this.reserve(this.size + extra_size);
      if (index < this.size) {
        final Integer tail_size = this.size - index;
        assert tail_size >= 0;
        this.the_elements.move(index, index + extra_size, tail_size);
      }
      this.size += extra_size;
    }
    public void clear(final Integer begin, final Integer length) {
      if (begin + length < this.size) {
        this.the_elements.move(begin + length, begin, length);
      }
      final Integer new_size = this.size - length;
      assert new_size >= 0;
      this.size = new_size;
      this.the_elements.scrub(this.size, length);
    }
    public base_readonly_list.list_state<element_type> copy() {
      final base_readonly_list.list_state<element_type> new_state = new base_readonly_list.list_state<element_type>(this.size);
      this.the_elements.copy(0, ((array<Object>) (Object) new_state.the_elements), 0, this.size);
      new_state.size = this.size;
      return new_state;
    }
  }
  protected base_readonly_list.list_state<element_type> state;
  protected base_readonly_list() {
    this.state = new base_readonly_list.list_state<element_type>();
  }
  protected base_readonly_list(final base_readonly_list.list_state<element_type> state) {
    this.state = state;
  }
  public @Override Integer size() {
    return this.state.size;
  }
  public @Override boolean is_empty() {
    return ideal.machine.elements.runtime_util.values_equal(this.state.size, 0);
  }
  public @Override boolean is_not_empty() {
    return !ideal.machine.elements.runtime_util.values_equal(this.state.size, 0);
  }
  public @Override element_type first() {
    assert this.is_not_empty();
    return this.state.the_elements.at(0).get();
  }
  public @Override element_type last() {
    assert this.is_not_empty();
    final Integer last_index = this.state.size - 1;
    assert last_index >= 0;
    return this.state.the_elements.at(last_index).get();
  }
  public @Override element_type get(final Integer index) {
    assert index < this.state.size;
    return this.state.the_elements.at(index).get();
  }
  public @Override immutable_list<element_type> elements() {
    return this.frozen_copy();
  }
  public @Override immutable_list<element_type> frozen_copy() {
    return new base_immutable_list<element_type>(this.state);
  }
  public @Override immutable_list<element_type> slice(final Integer begin, final Integer end) {
    assert begin >= 0 && end <= this.size();
    final Integer length = end - begin;
    assert length >= 0;
    final base_readonly_list.list_state<element_type> slice_state = new base_readonly_list.list_state<element_type>(length);
    slice_state.size = length;
    this.state.the_elements.copy(begin, ((array<Object>) (Object) slice_state.the_elements), 0, length);
    return new base_immutable_list<element_type>(slice_state);
  }
  public @Override immutable_list<element_type> skip(final Integer count) {
    return this.slice(count, this.size());
  }
  public @Override boolean has(final predicate<element_type> the_predicate) {
    for (Integer index = 0; index < this.state.size; index += 1) {
      if (((function1<Boolean, element_type>) (Object) the_predicate).call(this.state.the_elements.at(index).get())) {
        return true;
      }
    }
    return false;
  }
  public @Override range indexes() {
    return new base_range(0, this.size());
  }
}
