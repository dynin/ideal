// Autogenerated from isource/runtime/elements/base_string.i

package ideal.runtime.elements;

import ideal.library.elements.*;
import ideal.library.texts.string_text_node;
import java.lang.Object;
import java.lang.String;
import java.lang.StringBuffer;

public class base_string extends debuggable implements string, string_text_node {
  private final String state;
  public base_string(final String s1) {
    this.state = s1;
  }
  public base_string(final String s1, final String s2) {
    this.state = s1 + s2;
  }
  public base_string(final String s1, final String s2, final String s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final String s1, final String s2, final String s3, final String s4) {
    this.state = c(c(c(s1, s2), s3), s4);
  }
  public base_string(final String s1, final String s2, final String s3, final String s4, final String s5) {
    this.state = c(c(c(c(s1, s2), s3), s4), s5);
  }
  public base_string(final String s1, final String s2, final String s3, final String s4, final String s5, final String s6) {
    this.state = c(c(c(c(c(s1, s2), s3), s4), s5), s6);
  }
  public base_string(final String s1, final String s2, final String s3, final String s4, final String s5, final String s6, final String s7) {
    this.state = c(c(c(c(c(c(s1, s2), s3), s4), s5), s6), s7);
  }
  public base_string(final string s1, final string s2) {
    this.state = unbox(s1) + unbox(s2);
  }
  public base_string(final string s1, final string s2, final string s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final string s1, final string s2, final string s3, final string s4) {
    this.state = c(c(c(s1, s2), s3), s4);
  }
  public base_string(final string s1, final string s2, final string s3, final string s4, final string s5) {
    this.state = c(c(c(c(s1, s2), s3), s4), s5);
  }
  public base_string(final string s1, final string s2, final string s3, final string s4, final string s5, final string s6) {
    this.state = c(c(c(c(c(s1, s2), s3), s4), s5), s6);
  }
  public base_string(final String s1, final string s2) {
    this.state = s1 + unbox(s2);
  }
  public base_string(final string s1, final String s2) {
    this.state = unbox(s1) + s2;
  }
  public base_string(final string s1, final String s2, final String s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final String s1, final string s2, final String s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final String s1, final String s2, final string s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final string s1, final String s2, final string s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final string s1, final string s2, final String s3) {
    this.state = c(c(s1, s2), s3);
  }
  public base_string(final String s1, final string s2, final String s3, final String s4, final String s5) {
    this.state = c(c(c(c(s1, s2), s3), s4), s5);
  }
  public String s() {
    return state;
  }
  public static String unbox(final string the_string) {
    return ((base_string) the_string).s();
  }
  public static String c(final String s1, final String s2) {
    return (String) (s1 + s2);
  }
  public static String c(final String s1, final string s2) {
    return (String) (s1 + unbox(s2));
  }
  public static String c(final string s1, final string s2) {
    return (String) (unbox(s1) + unbox(s2));
  }
  public static String c(final string s1, final String s2) {
    return (String) (unbox(s1) + s2);
  }
  public @Override int size() {
    return state.length();
  }
  public @Override boolean is_empty() {
    return state.length() == 0;
  }
  public @Override Character get(final int index) {
    return state.charAt(index);
  }
  public @Override immutable_list<Character> elements() {
    return this;
  }
  public @Override immutable_list<Character> frozen_copy() {
    return this;
  }
  public @Override string skip(final int count) {
    return new base_string(state.substring(count));
  }
  public @Override string slice(final int begin, final int end) {
    return new base_string(state.substring(begin, end));
  }
  public @Override string reverse() {
    return new base_string(new StringBuffer(state).reverse().toString());
  }
  public @Override boolean equals(final Object other) {
    return other instanceof base_string && this.state.equals(((base_string) other).state);
  }
  public @Override string to_string() {
    return this;
  }
}
