// Autogenerated from runtime/elements/empty.i

package ideal.runtime.elements;

import ideal.library.elements.*;

public class empty<element_type> implements immutable_list<element_type>, immutable_set<element_type> {
  public empty() { }
  public @Override int size() {
    return 0;
  }
  public @Override boolean is_empty() {
    return true;
  }
  public @Override boolean is_not_empty() {
    return false;
  }
  public @Override element_type first() {
    utilities.panic(new base_string("Can't access the first element of the empty list"));
    return null;
  }
  public @Override element_type last() {
    utilities.panic(new base_string("Can't access the last element of the empty list"));
    return null;
  }
  public @Override boolean contains(final element_type key) {
    return false;
  }
  public @Override element_type get(final int index) {
    utilities.panic(new base_string("Empty list"));
    return null;
  }
  public @Override immutable_list<element_type> elements() {
    return this;
  }
  public @Override empty<element_type> frozen_copy() {
    return this;
  }
  public @Override immutable_list<element_type> skip(final int count) {
    assert count == 0;
    return this;
  }
  public @Override immutable_list<element_type> slice(final int begin, final int end) {
    assert begin == 0 && end == 0;
    return this;
  }
  public @Override immutable_list<element_type> reverse() {
    return this;
  }
}
