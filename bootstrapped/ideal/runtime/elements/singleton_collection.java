// Autogenerated from runtime/elements/singleton_collection.i

package ideal.runtime.elements;

import ideal.library.elements.*;

public class singleton_collection<element_type> implements immutable_list<element_type>, immutable_set<element_type> {
  public final element_type element;
  public singleton_collection(final element_type element) {
    this.element = element;
  }
  public @Override Integer size() {
    return 1;
  }
  public @Override boolean is_empty() {
    return false;
  }
  public @Override boolean is_not_empty() {
    return true;
  }
  public @Override element_type first() {
    return this.element;
  }
  public @Override element_type last() {
    return this.element;
  }
  public @Override boolean contains(final element_type key) {
    return ideal.machine.elements.runtime_util.values_equal(key, this.element);
  }
  public @Override element_type get(final Integer index) {
    assert ideal.machine.elements.runtime_util.values_equal(index, 0);
    return this.element;
  }
  public @Override immutable_list<element_type> elements() {
    return this;
  }
  public @Override singleton_collection<element_type> frozen_copy() {
    return this;
  }
  public @Override immutable_list<element_type> skip(final Integer count) {
    if (ideal.machine.elements.runtime_util.values_equal(count, 0)) {
      return this;
    } else {
      assert ideal.machine.elements.runtime_util.values_equal(count, 1);
      return new empty<element_type>();
    }
  }
  public @Override immutable_list<element_type> slice(final Integer begin, final Integer end) {
    if (ideal.machine.elements.runtime_util.values_equal(begin, end)) {
      return new empty<element_type>();
    } else {
      assert ideal.machine.elements.runtime_util.values_equal(begin, 0) && ideal.machine.elements.runtime_util.values_equal(end, 1);
      return this;
    }
  }
  public @Override immutable_list<element_type> reversed() {
    return this;
  }
  public @Override boolean has(final predicate<element_type> the_predicate) {
    return ((function1<Boolean, element_type>) (Object) the_predicate).call(this.element);
  }
  public @Override range indexes() {
    return new base_range(0, 1);
  }
}
