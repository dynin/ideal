// Autogenerated from runtime/elements/test_dictionary.i

package ideal.runtime.elements;

import ideal.library.elements.*;

public class test_dictionary {
  public void test_mutable_dictionary() {
    final list_dictionary<string, string> dict = new list_dictionary<string, string>();
    assert dict.is_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict.size(), 0);
    final list_dictionary<string, string> dict2 = new list_dictionary<string, string>(new base_string("key"), new base_string("value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 1);
    assert !dict2.is_empty();
    assert dict2.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key")), new base_string("value"));
    assert dict2.get(new base_string("notfound")) == null;
    dict2.put(new base_string("key"), new base_string("new_value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 1);
    assert !dict2.is_empty();
    assert dict2.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key")), new base_string("new_value"));
    assert dict2.get(new base_string("notfound")) == null;
    dict2.put(new base_string("key2"), new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 2);
    assert !dict2.is_empty();
    assert dict2.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key")), new base_string("new_value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key2")), new base_string("bar"));
    assert dict2.get(new base_string("notfound")) == null;
    final immutable_dictionary<string, string> dict3 = dict2.frozen_copy();
    dict2.put(new base_string("key3"), new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 3);
    assert ideal.machine.elements.runtime_util.values_equal(dict3.size(), 2);
    assert !dict3.is_empty();
    assert dict3.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict3.get(new base_string("key")), new base_string("new_value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict3.get(new base_string("key2")), new base_string("bar"));
    assert dict3.get(new base_string("notfound")) == null;
    dict2.remove(new base_string("key2"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 2);
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key")), new base_string("new_value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key3")), new base_string("baz"));
    assert dict2.get(new base_string("key2")) == null;
  }
  public void test_immutable_dictionary() {
    final immutable_list_dictionary<string, string> dict = new immutable_list_dictionary<string, string>();
    assert dict.is_empty();
    assert !dict.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict.size(), 0);
    final immutable_list_dictionary<string, string> dict2 = new immutable_list_dictionary<string, string>(new base_string("key"), new base_string("value"));
    assert ideal.machine.elements.runtime_util.values_equal(dict2.size(), 1);
    assert !dict2.is_empty();
    assert dict2.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(dict2.get(new base_string("key")), new base_string("value"));
    assert dict2.get(new base_string("notfound")) == null;
  }
  public test_dictionary() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_dictionary.test_mutable_dictionary"));
    this.test_mutable_dictionary();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_dictionary.test_immutable_dictionary"));
    this.test_immutable_dictionary();
    ideal.machine.elements.runtime_util.end_test();
  }
}
