// Autogenerated from runtime/elements/test_list.i

package ideal.runtime.elements;

import ideal.library.elements.*;

public class test_list {
  public void test_empty() {
    final empty<string> strings = new empty<string>();
    assert strings.is_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 0);
    final immutable_list<string> slice = strings.slice(0, 0);
    assert slice.is_empty();
    assert !slice.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(slice.size(), 0);
    final range the_range = strings.indexes();
    assert ideal.machine.elements.runtime_util.values_equal(the_range.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(the_range.end(), 0);
  }
  public void test_singleton_collection() {
    final singleton_collection<string> strings = new singleton_collection<string>(new base_string("foo"));
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    final range the_range = strings.indexes();
    assert ideal.machine.elements.runtime_util.values_equal(the_range.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(the_range.end(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("foo"));
    assert strings.contains(new base_string("foo"));
    assert !strings.contains(new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.get(0), new base_string("foo"));
    final immutable_list<string> strings_elements = strings.elements();
    assert ideal.machine.elements.runtime_util.values_equal(strings_elements.size(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(strings_elements.get(0), new base_string("foo"));
    final singleton_collection<string> strings_copy = strings.frozen_copy();
    assert ideal.machine.elements.runtime_util.values_equal(strings_copy.size(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(strings_copy.get(0), new base_string("foo"));
    final immutable_list<string> skip0 = strings.skip(0);
    assert ideal.machine.elements.runtime_util.values_equal(skip0.size(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(skip0.get(0), new base_string("foo"));
    final immutable_list<string> skip1 = strings.skip(1);
    assert ideal.machine.elements.runtime_util.values_equal(skip1.size(), 0);
    assert skip1.is_empty();
    final immutable_list<string> slice0 = strings.slice(0, 0);
    assert slice0.is_empty();
    assert ideal.machine.elements.runtime_util.values_equal(slice0.size(), 0);
    final immutable_list<string> slice1 = strings.slice(1, 1);
    assert slice1.is_empty();
    assert ideal.machine.elements.runtime_util.values_equal(slice1.size(), 0);
    final immutable_list<string> slice01 = strings.slice(0, 1);
    assert slice01.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(slice01.size(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(slice01.get(0), new base_string("foo"));
    strings.reverse();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    assert ideal.machine.elements.runtime_util.values_equal(strings.get(0), new base_string("foo"));
  }
  public void test_simple_list() {
    final base_list<string> strings = new base_list<string>();
    assert strings.is_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 0);
    strings.append(new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    strings.append(new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 2);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(1).get(), new base_string("bar"));
    final range the_range = strings.indexes();
    assert ideal.machine.elements.runtime_util.values_equal(the_range.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(the_range.end(), 2);
    final string removed = strings.remove_last();
    assert ideal.machine.elements.runtime_util.values_equal(removed, new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
  }
  public void test_list_elements() {
    final base_list<string> strings = new base_list<string>();
    assert strings.is_empty();
    assert !strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 0);
    strings.append(new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    final immutable_list<string> elements = strings.elements();
    assert ideal.machine.elements.runtime_util.values_equal(elements.size(), 1);
    assert !elements.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(elements.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(elements.last(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(elements.get(0), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    strings.append(new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 2);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(1).get(), new base_string("bar"));
  }
  public void test_list_remove() {
    final base_list<string> strings = new base_list<string>();
    strings.append(new base_string("foo"));
    strings.append(new base_string("bar"));
    strings.append(new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 3);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(1).get(), new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(2).get(), new base_string("baz"));
    strings.remove_at(1);
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 2);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(1).get(), new base_string("baz"));
    strings.remove_at(0);
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 1);
    assert !strings.is_empty();
    assert strings.is_not_empty();
    assert ideal.machine.elements.runtime_util.values_equal(strings.first(), new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.last(), new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(strings.at(0).get(), new base_string("baz"));
    strings.remove_at(0);
    assert ideal.machine.elements.runtime_util.values_equal(strings.size(), 0);
    assert strings.is_empty();
    assert !strings.is_not_empty();
  }
  public void test_list_sort() {
    final base_list<Integer> numbers = new base_list<Integer>();
    numbers.append_all(new base_immutable_list<Integer>(new ideal.machine.elements.array<Integer>(new Integer[]{ -1, 68, 42, -2, 0 })));
    numbers.sort(new test_list.number_order());
    assert ideal.machine.elements.runtime_util.values_equal(numbers.size(), 5);
    assert ideal.machine.elements.runtime_util.values_equal(numbers.at(0).get(), -2);
    assert ideal.machine.elements.runtime_util.values_equal(numbers.at(1).get(), -1);
    assert ideal.machine.elements.runtime_util.values_equal(numbers.at(2).get(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(numbers.at(3).get(), 42);
    assert ideal.machine.elements.runtime_util.values_equal(numbers.at(4).get(), 68);
  }
  private static class number_order implements order<Integer> {
    public @Override sign call(final Integer first, final Integer second) {
      return ideal.machine.elements.runtime_util.compare(first, second);
    }
    public number_order() { }
  }
  public test_list() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_empty"));
    this.test_empty();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_singleton_collection"));
    this.test_singleton_collection();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_simple_list"));
    this.test_simple_list();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_list_elements"));
    this.test_list_elements();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_list_remove"));
    this.test_list_remove();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_list.test_list_sort"));
    this.test_list_sort();
    ideal.machine.elements.runtime_util.end_test();
  }
}
