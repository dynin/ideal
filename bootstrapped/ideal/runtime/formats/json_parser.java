// Autogenerated from runtime/formats/json_parser.i

package ideal.runtime.formats;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.runtime.elements.*;
import ideal.machine.channels.string_writer;

import javax.annotation.Nullable;

public class json_parser {
  public final character_handler the_character_handler;
  public list<Object> tokens;
  public @Nullable string error;
  public json_parser(final character_handler the_character_handler) {
    this.the_character_handler = the_character_handler;
    this.tokens = new base_list<Object>();
  }
  public boolean has_error() {
    return this.error != null;
  }
  private void tokenize(final string input) {
    this.tokens.clear();
    int index = 0;
    while (index < input.size() && this.error == null) {
      index = this.scan(input, index);
    }
  }
  public list<Object> test_tokenize(final string input) {
    this.tokenize(input);
    assert !this.has_error();
    return this.tokens;
  }
  private int scan(final string input, int index) {
    final char next = input.get(index);
    index += 1;
    if (this.the_character_handler.is_whitespace(next)) {
      while (index < input.size() && this.the_character_handler.is_whitespace(input.get(index))) {
        index += 1;
      }
      return index;
    }
    if (next == '\"') {
      final string_writer result = new string_writer();
      while (index < input.size()) {
        final char next_in_input = input.get(index);
        if (next_in_input == '\"') {
          this.tokens.append(result.elements());
          return index + 1;
        } else if (next_in_input == '\\') {
          if (index >= input.size()) {
            this.report_error(new base_string("Escape at the end of input"));
            return index;
          }
          index += 1;
          final char escaped_character = input.get(index);
          if (escaped_character == '\"' || escaped_character == '\\' || escaped_character == '/') {
            result.write(escaped_character);
          } else if (escaped_character == 'b') {
            result.write('\b');
          } else if (escaped_character == 'f') {
            result.write('\f');
          } else if (escaped_character == 'n') {
            result.write('\n');
          } else if (escaped_character == 'r') {
            result.write('\r');
          } else if (escaped_character == 't') {
            result.write('\t');
          } else {
            this.report_error(ideal.machine.elements.runtime_util.concatenate(new base_string("Unrecognized escape character: "), escaped_character));
            return index;
          }
        } else {
          result.write(next_in_input);
        }
        index += 1;
      }
      this.report_error(new base_string("No closing quote in a string"));
      return index;
    }
    if (this.the_character_handler.is_digit(next)) {
      final @Nullable Integer digit = this.the_character_handler.from_digit(next, radix.DEFAULT_RADIX);
      assert digit >= 0;
      int result = digit;
      while (index < input.size() && this.the_character_handler.is_digit(input.get(index))) {
        final @Nullable Integer next_digit = this.the_character_handler.from_digit(input.get(index), radix.DEFAULT_RADIX);
        assert next_digit >= 0;
        result = result * radix.DEFAULT_RADIX + next_digit;
        index += 1;
      }
      this.tokens.append(result);
      return index;
    }
    if (next == json_token.OPEN_BRACE.token) {
      this.tokens.append(json_token.OPEN_BRACE);
      return index;
    }
    if (next == json_token.CLOSE_BRACE.token) {
      this.tokens.append(json_token.CLOSE_BRACE);
      return index;
    }
    if (next == json_token.OPEN_BRACKET.token) {
      this.tokens.append(json_token.OPEN_BRACKET);
      return index;
    }
    if (next == json_token.CLOSE_BRACKET.token) {
      this.tokens.append(json_token.CLOSE_BRACKET);
      return index;
    }
    if (next == json_token.COMMA.token) {
      this.tokens.append(json_token.COMMA);
      return index;
    }
    if (next == json_token.COLON.token) {
      this.tokens.append(json_token.COLON);
      return index;
    }
    this.report_error(ideal.machine.elements.runtime_util.concatenate(new base_string("Unrecognized character in a string: "), next));
    return index;
  }
  private void report_error(final string message) {
    this.error = message;
  }
}
