// Autogenerated from runtime/json/json_parser.i

package ideal.runtime.json;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public class json_parser {
  public final character_handler the_character_handler;
  public list<immutable_value> tokens;
  public @Nullable string error;
  public json_parser(final character_handler the_character_handler) {
    this.the_character_handler = the_character_handler;
    this.tokens = new base_list<immutable_value>();
  }
  public void tokenize(final string input) {
    int start = 0;
    while (start < input.size() && this.error == null) {
      start = this.scan(input, start);
    }
  }
  private int scan(final string input, int start) {
    final char next = input.get(start);
    if (this.the_character_handler.is_whitespace(next)) {
      start += 1;
      while (start < input.size() && this.the_character_handler.is_whitespace(input.get(start))) {
        start += 1;
      }
      return start;
    }
    if (next == '\"') {
      start += 1;
      final int string_start = start;
      while (start < input.size()) {
        final char next_in_string = input.get(start);
        if (next_in_string == '\"') {
          this.tokens.append(input.slice(string_start, start));
          return start + 1;
        }
        start += 1;
      }
      this.report_error(new base_string("No closing quote in a string"));
      return start;
    }
    this.report_error(ideal.machine.elements.runtime_util.concatenate(new base_string("Unrecognized character in a string: "), next));
    return start + 1;
  }
  private void report_error(final string message) {
    this.error = message;
  }
}
