// Autogenerated from runtime/patterns/base_pattern.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public abstract class base_pattern<element_type> implements validatable, pattern<element_type> {
  public @Override immutable_list<immutable_list<element_type>> split(final immutable_list<element_type> the_list) {
    final base_list<immutable_list<element_type>> result = new base_list<immutable_list<element_type>>();
    int index = 0;
    while (true) {
      final @Nullable range match = this.find_first(the_list, index);
      if (match != null) {
        assert match.is_not_empty();
        result.append(the_list.slice(index, match.begin()));
        index = match.end();
      } else {
        result.append(the_list.skip(index));
        break;
      }
    }
    return result.frozen_copy();
  }
}
