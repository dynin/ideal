// Autogenerated from runtime/patterns/procedure_matcher.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public class procedure_matcher<element_type, result_type> implements validatable, matcher<element_type, result_type> {
  public final pattern<element_type> the_pattern;
  public final procedure1<result_type, readonly_list<element_type>> parser;
  public procedure_matcher(final pattern<element_type> the_pattern, final procedure1<result_type, readonly_list<element_type>> parser) {
    this.the_pattern = the_pattern;
    this.parser = parser;
  }
  public @Override void validate() {
    ((validatable) this.the_pattern).validate();
  }
  public @Override Boolean call(final readonly_list<element_type> the_list) {
    return this.the_pattern.call(the_list);
  }
  public @Override boolean is_viable_prefix(final readonly_list<element_type> the_list) {
    return this.the_pattern.is_viable_prefix(the_list);
  }
  public @Override @Nullable Integer match_prefix(final readonly_list<element_type> the_list) {
    return this.the_pattern.match_prefix(the_list);
  }
  public @Override @Nullable range find_first(final readonly_list<element_type> the_list, final Integer start_index) {
    return this.the_pattern.find_first(the_list, start_index);
  }
  public immutable_list<immutable_list<element_type>> split(final immutable_list<element_type> the_list) {
    return this.the_pattern.split(the_list);
  }
  public @Override result_type parse(final readonly_list<element_type> the_list) {
    return this.parser.call(the_list);
  }
}
