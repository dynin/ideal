// Autogenerated from runtime/patterns/repeat_matcher.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public abstract class repeat_matcher<element_type, result_type> extends repeat_pattern<element_type> implements matcher<element_type, result_type> {
  public repeat_matcher(final matcher<element_type, result_type> the_pattern, final boolean do_match_empty) {
    super(the_pattern, do_match_empty);
  }
  public @Override @Nullable result_type parse(final readonly_list<element_type> the_list) {
    int index = 0;
    @Nullable result_type result = null;
    while (index < the_list.size()) {
      final @Nullable Integer match = this.the_pattern.match_prefix(the_list.skip(index));
      if (match == null) {
        {
          utilities.panic(new base_string("Can\'t parse list in repeat_matcher"));
          return null;
        }
      }
      assert match > 0;
      final result_type matched = ((matcher<element_type, result_type>) this.the_pattern).parse(the_list.slice(index, index + match));
      if (result == null) {
        result = matched;
      } else if (matched != null) {
        result = this.combine(result, matched);
      }
      index += match;
    }
    return result;
  }
  protected abstract result_type combine(result_type first, result_type second);
}
