// Autogenerated from runtime/patterns/sequence_pattern.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public class sequence_pattern<element_type> extends base_pattern<element_type> {
  public final immutable_list<pattern<element_type>> patterns_list;
  public sequence_pattern(final readonly_list<pattern<element_type>> patterns_list) {
    assert patterns_list.is_not_empty();
    this.patterns_list = patterns_list.frozen_copy();
  }
  public @Override Boolean call(final readonly_list<element_type> the_list) {
    final @Nullable Integer match = this.match_prefix(the_list);
    return match != null && match == the_list.size();
  }
  public @Override boolean is_viable_prefix(final readonly_list<element_type> the_list) {
    if (the_list.is_empty()) {
      return true;
    }
    int index = 0;
    int prefix = 0;
    while (index < this.patterns_list.size() - 1) {
      final @Nullable Integer match = this.patterns_list.get(index).match_prefix(the_list.skip(prefix));
      if (match == null) {
        return false;
      }
      prefix += match;
      index += 1;
    }
    assert index == this.patterns_list.size() - 1;
    return this.patterns_list.get(index).is_viable_prefix(the_list.skip(prefix));
  }
  private @Nullable Integer match_subsequence(final readonly_list<element_type> the_list, int index, int prefix) {
    while (index < this.patterns_list.size()) {
      final @Nullable Integer match = this.patterns_list.get(index).match_prefix(the_list.skip(prefix));
      if (match == null) {
        return null;
      }
      prefix += match;
      index += 1;
    }
    return prefix;
  }
  public @Override @Nullable Integer match_prefix(final readonly_list<element_type> the_list) {
    return this.match_subsequence(the_list, 0, 0);
  }
  public @Override @Nullable range find_first(final readonly_list<element_type> the_list, int start_index) {
    while (true) {
      final @Nullable range first_match = this.patterns_list.get(0).find_first(the_list, start_index);
      if (first_match == null) {
        return null;
      }
      final @Nullable Integer rest_match = this.match_subsequence(the_list, 1, first_match.end());
      if (rest_match != null) {
        return new base_range(first_match.begin(), rest_match);
      }
      start_index = first_match.begin() + 1;
    }
  }
}
