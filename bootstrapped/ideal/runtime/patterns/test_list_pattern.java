// Autogenerated from runtime/patterns/test_list_pattern.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public class test_list_pattern {
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test("test_list_pattern.test_match");
    test_match();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_list_pattern.test_viable_prefix");
    test_viable_prefix();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_list_pattern.test_match_prefix");
    test_match_prefix();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_list_pattern.test_find_first");
    test_find_first();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_list_pattern.test_split");
    test_split();
    ideal.machine.elements.runtime_util.end_test();
  }
  public void test_match() {
    final list_pattern<Character> the_pattern = new list_pattern<Character>(new base_string("abc"));
    assert the_pattern.call(new base_string("abc"));
    assert !the_pattern.call(new base_string("xx"));
    assert !the_pattern.call(new base_string("ab"));
    assert !the_pattern.call(new base_string("abcd"));
  }
  public void test_viable_prefix() {
    final list_pattern<Character> the_pattern = new list_pattern<Character>(new base_string("abc"));
    assert the_pattern.is_viable_prefix(new base_string(""));
    assert the_pattern.is_viable_prefix(new base_string("a"));
    assert the_pattern.is_viable_prefix(new base_string("abc"));
    assert !the_pattern.is_viable_prefix(new base_string("xy"));
    assert !the_pattern.is_viable_prefix(new base_string("aa"));
    assert !the_pattern.is_viable_prefix(new base_string("abcdef"));
  }
  public void test_match_prefix() {
    final list_pattern<Character> the_pattern = new list_pattern<Character>(new base_string("abc"));
    assert the_pattern.match_prefix(new base_string("")) == null;
    assert the_pattern.match_prefix(new base_string("abc")) == 3;
    assert the_pattern.match_prefix(new base_string("ab")) == null;
    assert the_pattern.match_prefix(new base_string("abcdef")) == 3;
  }
  public void test_find_first() {
    final list_pattern<Character> the_pattern = new list_pattern<Character>(new base_string("abc"));
    assert the_pattern.find_first(new base_string(""), 0) == null;
    assert the_pattern.find_first(new base_string("foo"), 0) == null;
    assert the_pattern.find_first(new base_string("bca"), 1) == null;
    final @Nullable range match = the_pattern.find_first(new base_string("abc"), 0);
    assert match != null;
    assert match.begin() == 0;
    assert match.end() == 3;
    final @Nullable range match2 = the_pattern.find_first(new base_string("abcxabcdef"), 2);
    assert match2 != null;
    assert match2.begin() == 4;
    assert match2.end() == 7;
  }
  public void test_split() {
    final list_pattern<Character> the_pattern = new list_pattern<Character>(new base_string("abc"));
    final immutable_list<immutable_list<Character>> split0 = the_pattern.split(new base_string("foo"));
    assert split0.size() == 1;
    assert this.equals(split0.get(0), new base_string("foo"));
    final immutable_list<immutable_list<Character>> split1 = the_pattern.split(new base_string("fooabcxyzabc"));
    assert split1.size() == 3;
    assert this.equals(split1.get(0), new base_string("foo"));
    assert this.equals(split1.get(1), new base_string("xyz"));
    assert this.equals(split1.get(2), new base_string(""));
    final immutable_list<immutable_list<Character>> split2 = the_pattern.split(new base_string("abc1abc2abc3"));
    assert split2.size() == 4;
    assert this.equals(split2.get(0), new base_string(""));
    assert this.equals(split2.get(1), new base_string("1"));
    assert this.equals(split2.get(2), new base_string("2"));
    assert this.equals(split2.get(3), new base_string("3"));
  }
  public boolean equals(final immutable_list<Character> s0, final string s1) {
    return ideal.machine.elements.runtime_util.values_equal(((string) s0), s1);
  }
}
