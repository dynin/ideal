// Autogenerated from runtime/patterns/test_option_matcher.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

public class test_option_matcher {
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test("test_option_matcher.test_match_parse");
    test_match_parse();
    ideal.machine.elements.runtime_util.end_test();
  }
  private boolean match_a(final char c) {
    return c == 'a' || c == 'A';
  }
  private boolean match_b(final char c) {
    return c == 'b' || c == 'B';
  }
  private boolean match_c(final char c) {
    return c == 'c' || c == 'C';
  }
  private string as_string(final readonly_list<Character> char_list) {
    return ideal.machine.elements.runtime_util.concatenate(new base_string("*"), ((base_string) char_list.frozen_copy()));
  }
  public matcher<Character, string> make_matcher(final function1<Boolean, Character> the_predicate) {
    return new procedure_matcher<Character, string>(new repeat_element<Character>(the_predicate, false), new procedure1<string, readonly_list<Character>>() {
      @Override public string call(readonly_list<Character> first) {
        return test_option_matcher.this.as_string(first);
      }
    });
  }
  public void test_match_parse() {
    final immutable_list<matcher<Character, string>> matchers = new base_immutable_list<matcher<Character, string>>(new ideal.machine.elements.array<matcher<Character, string>>(new matcher[]{ this.make_matcher(new function1<Boolean, Character>() {
      @Override public Boolean call(Character first) {
        return test_option_matcher.this.match_a(first);
      }
    }), this.make_matcher(new function1<Boolean, Character>() {
      @Override public Boolean call(Character first) {
        return test_option_matcher.this.match_b(first);
      }
    }), this.make_matcher(new function1<Boolean, Character>() {
      @Override public Boolean call(Character first) {
        return test_option_matcher.this.match_c(first);
      }
    }) }));
    final option_matcher<Character, string> the_matcher = new option_matcher<Character, string>(matchers);
    the_matcher.validate();
    assert the_matcher.call(new base_string("a"));
    assert the_matcher.call(new base_string("Bbb"));
    assert the_matcher.call(new base_string("Cccc"));
    assert !the_matcher.call(new base_string("abc"));
    assert !the_matcher.call(new base_string("aabb"));
    assert !the_matcher.call(new base_string("aaca"));
    assert ideal.machine.elements.runtime_util.values_equal(the_matcher.parse(new base_string("aaa")), new base_string("*aaa"));
    assert ideal.machine.elements.runtime_util.values_equal(the_matcher.parse(new base_string("Bbb")), new base_string("*Bbb"));
    assert ideal.machine.elements.runtime_util.values_equal(the_matcher.parse(new base_string("CCCccc")), new base_string("*CCCccc"));
  }
  public test_option_matcher() { }
}
