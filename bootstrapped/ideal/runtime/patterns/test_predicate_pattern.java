// Autogenerated from runtime/patterns/test_predicate_pattern.i

package ideal.runtime.patterns;

import ideal.library.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.elements.*;

import javax.annotation.Nullable;

public class test_predicate_pattern {
  private boolean test_predicate(final char c) {
    return c == 'a' || c == 'b' || c == 'c';
  }
  public void test_match() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    assert the_pattern.call(new base_string("a"));
    assert !the_pattern.call(new base_string("y"));
    assert !the_pattern.call(new base_string("xx"));
  }
  public void test_viable_prefix() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    assert the_pattern.is_viable_prefix(new base_string(""));
    assert the_pattern.is_viable_prefix(new base_string("a"));
    assert !the_pattern.is_viable_prefix(new base_string("y"));
    assert !the_pattern.is_viable_prefix(new base_string("aa"));
  }
  public void test_match_prefix() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    assert the_pattern.match_prefix(new base_string("")) == null;
    assert ideal.machine.elements.runtime_util.values_equal(the_pattern.match_prefix(new base_string("a")), 1);
    assert the_pattern.match_prefix(new base_string("x")) == null;
    assert ideal.machine.elements.runtime_util.values_equal(the_pattern.match_prefix(new base_string("abcdef")), 1);
  }
  public void test_find_first() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    assert the_pattern.find_first(new base_string(""), 0) == null;
    assert the_pattern.find_first(new base_string("foo"), 0) == null;
    assert the_pattern.find_first(new base_string("bfoo"), 1) == null;
    final @Nullable range match = the_pattern.find_first(new base_string("a"), 0);
    assert match != null;
    assert ideal.machine.elements.runtime_util.values_equal(match.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(match.end(), 1);
    final @Nullable range match2 = the_pattern.find_first(new base_string("ayzzyby"), 2);
    assert match2 != null;
    assert ideal.machine.elements.runtime_util.values_equal(match2.begin(), 5);
    assert ideal.machine.elements.runtime_util.values_equal(match2.end(), 6);
  }
  public void test_find_last() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    assert the_pattern.find_last(new base_string(""), null) == null;
    assert the_pattern.find_last(new base_string("foo"), null) == null;
    assert the_pattern.find_last(new base_string("foo"), 3) == null;
    assert the_pattern.find_last(new base_string("fooc"), 3) == null;
    final @Nullable range match = the_pattern.find_last(new base_string("c"), 1);
    assert match != null;
    assert ideal.machine.elements.runtime_util.values_equal(match.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(match.end(), 1);
    final @Nullable range match2 = the_pattern.find_last(new base_string("ayzzyby"), 6);
    assert match2 != null;
    assert ideal.machine.elements.runtime_util.values_equal(match2.begin(), 5);
    assert ideal.machine.elements.runtime_util.values_equal(match2.end(), 6);
    final @Nullable range match3 = the_pattern.find_last(new base_string("ayzzyby"), 4);
    assert match3 != null;
    assert ideal.machine.elements.runtime_util.values_equal(match3.begin(), 0);
    assert ideal.machine.elements.runtime_util.values_equal(match3.end(), 1);
    final @Nullable range match4 = the_pattern.find_last(new base_string("ayzzyby"), null);
    assert match4 != null;
    assert ideal.machine.elements.runtime_util.values_equal(match4.begin(), 5);
    assert ideal.machine.elements.runtime_util.values_equal(match4.end(), 6);
  }
  public void test_split() {
    final predicate_pattern<Character> the_pattern = new predicate_pattern<Character>(new function1<Boolean, Character>() {
      public @Override Boolean call(Character first) {
        return test_predicate_pattern.this.test_predicate(first);
      }
    });
    final immutable_list<immutable_list<Character>> split0 = the_pattern.split(new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(split0.size(), 1);
    assert this.equals(split0.get(0), new base_string("foo"));
    final immutable_list<immutable_list<Character>> split1 = the_pattern.split(new base_string("fooaxyzc"));
    assert ideal.machine.elements.runtime_util.values_equal(split1.size(), 3);
    assert this.equals(split1.get(0), new base_string("foo"));
    assert this.equals(split1.get(1), new base_string("xyz"));
    assert this.equals(split1.get(2), new base_string(""));
    final immutable_list<immutable_list<Character>> split2 = the_pattern.split(new base_string("a1b2c3"));
    assert ideal.machine.elements.runtime_util.values_equal(split2.size(), 4);
    assert this.equals(split2.get(0), new base_string(""));
    assert this.equals(split2.get(1), new base_string("1"));
    assert this.equals(split2.get(2), new base_string("2"));
    assert this.equals(split2.get(3), new base_string("3"));
  }
  public boolean equals(final immutable_list<Character> s0, final string s1) {
    return ideal.machine.elements.runtime_util.values_equal(((string) s0), s1);
  }
  public test_predicate_pattern() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_match"));
    this.test_match();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_viable_prefix"));
    this.test_viable_prefix();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_match_prefix"));
    this.test_match_prefix();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_find_first"));
    this.test_find_first();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_find_last"));
    this.test_find_last();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_predicate_pattern.test_split"));
    this.test_split();
    ideal.machine.elements.runtime_util.end_test();
  }
}
