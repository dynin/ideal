// Autogenerated from runtime/resources/base_resource_catalog.i

package ideal.runtime.resources;

import ideal.library.elements.*;
import ideal.library.resources.*;
import ideal.runtime.elements.*;
import ideal.library.patterns.*;
import ideal.runtime.patterns.*;

import javax.annotation.Nullable;

public class base_resource_catalog implements resource_catalog, reference<dictionary<string, resource_identifier>> {
  private static final pattern<Character> scheme_separator = new singleton_pattern<Character>(':');
  private static final pattern<Character> path_separator = new singleton_pattern<Character>('/');
  private final resource_store the_resource_store;
  private final string the_scheme;
  private final immutable_list<string> path;
  protected base_resource_catalog(final resource_store the_resource_store, final string the_scheme, final immutable_list<string> path) {
    this.the_resource_store = the_resource_store;
    this.the_scheme = the_scheme;
    this.path = path;
  }
  public @Override reference<dictionary<string, resource_identifier>> content() {
    return this;
  }
  public @Override @Nullable dictionary<string, resource_identifier> get() {
    final @Nullable readonly_set<string> catalog = this.the_resource_store.read_catalog(this.the_scheme, this.path);
    if (catalog == null) {
      return null;
    }
    final hash_dictionary<string, resource_identifier> result = new hash_dictionary<string, resource_identifier>();
    {
      final readonly_list<string> resource_name_list = catalog.elements();
      for (Integer resource_name_index = 0; resource_name_index < resource_name_list.size(); resource_name_index += 1) {
        final string resource_name = resource_name_list.get(resource_name_index);
        result.put(resource_name, this.resolve(resource_name));
      }
    }
    return result;
  }
  public @Override void set(final @Nullable dictionary<string, resource_identifier> new_value) {
    utilities.panic(new base_string("can\'t set a catalog"));
  }
  public @Override resource_identifier get_id() {
    return new base_resource_identifier(this.the_resource_store, this.the_scheme, this.path);
  }
  public @Override resource_identifier resolve(final string name) {
    if (name.is_empty()) {
      return new base_resource_identifier(this.the_resource_store, this.the_scheme, this.path);
    }
    final @Nullable range scheme_range = base_resource_catalog.scheme_separator.find_first(name, 0);
    if (scheme_range != null) {
      final string candidate_scheme = name.slice(0, scheme_range.begin());
      if (!this.the_resource_store.allow_scheme(candidate_scheme)) {
        {
          utilities.panic(ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(new base_string("scheme "), candidate_scheme), new base_string(" not allowed")));
          return null;
        }
      }
      final immutable_list<immutable_list<Character>> components = base_resource_catalog.path_separator.split(name.skip(scheme_range.end()));
      return new base_resource_identifier(this.the_resource_store, candidate_scheme, (immutable_list<string>) (immutable_list) components.frozen_copy());
    }
    final immutable_list<immutable_list<Character>> components = base_resource_catalog.path_separator.split(name);
    boolean absolute = false;
    Integer index;
    final base_list<string> result = new base_list<string>();
    if (components.first().is_empty()) {
      if (this.the_resource_store.allow_up()) {
        absolute = true;
      } else { }
      index = 1;
    } else {
      index = 0;
      result.append_all(this.path);
    }
    while (index < components.size()) {
      final string component = (string) components.get(index);
      index += 1;
      if (component.is_empty() || ideal.machine.elements.runtime_util.values_equal(component, resource_util.CURRENT_CATALOG)) {
        continue;
      } else if (ideal.machine.elements.runtime_util.values_equal(component, resource_util.PARENT_CATALOG)) {
        if (result.is_empty()) {
          if (this.the_resource_store.allow_up()) {
            result.append(component);
          } else { }
        } else {
          if (ideal.machine.elements.runtime_util.values_equal(result.last(), resource_util.PARENT_CATALOG)) {
            assert this.the_resource_store.allow_up();
            result.append(component);
          } else {
            result.remove_last();
          }
        }
      } else {
        result.append(component);
      }
    }
    if (absolute) {
      result.prepend(new base_string(""));
    } else if (result.is_empty()) {
      result.append(resource_util.CURRENT_CATALOG);
    }
    return new base_resource_identifier(this.the_resource_store, this.the_scheme, result.frozen_copy());
  }
  public @Override resource_identifier resolve(final string name, final @Nullable extension the_extension) {
    if (the_extension != null) {
      return this.resolve(new base_string(name, the_extension.dot_name()));
    } else {
      return this.resolve(name);
    }
  }
  public @Override string to_string() {
    return this.get_id().to_string();
  }
}
