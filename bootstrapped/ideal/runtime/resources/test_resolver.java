// Autogenerated from runtime/resources/test_resolver.i

package ideal.runtime.resources;

import ideal.library.elements.*;
import ideal.library.resources.*;
import ideal.runtime.elements.*;
import ideal.machine.resources.*;

import javax.annotation.Nullable;

public class test_resolver implements value {
  public static class test_store extends base_resource_store {
    public test_store(final string path_prefix, final boolean is_current) {
      super(path_prefix, is_current, is_current);
    }
    public @Override boolean allow_scheme(final string scheme) {
      return true;
    }
    public @Override boolean exists(final string scheme, final immutable_list<string> path) {
      return false;
    }
    public @Override string read_string(final string scheme, final immutable_list<string> path) {
      return new base_string("test");
    }
    public @Override void write_string(final string scheme, final immutable_list<string> path, final string new_value) { }
    public @Override void make_catalog(final string scheme, final immutable_list<string> path) { }
    public @Override @Nullable readonly_set<string> read_catalog(final string scheme, final immutable_list<string> path) {
      return null;
    }
    protected @Override string default_scheme() {
      return resource_util.FILE_SCHEME;
    }
  }
  public static final resource_catalog CURRENT = new test_resolver.test_store(resource_util.CURRENT_CATALOG, true).top();
  public static final resource_catalog ROOT = new test_resolver.test_store(resource_util.ROOT_CATALOG, false).top();
  public void test_file_catalogs() {
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.CURRENT.id().to_string(), new base_string("."));
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.ROOT.id().to_string(), new base_string("/"));
  }
  public void test_simple_resolve() {
    final string foo = new base_string("foo");
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.CURRENT.resolve(foo).to_string(), new base_string("foo"));
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.ROOT.resolve(foo).to_string(), new base_string("/foo"));
  }
  public void test_resolve_extension() {
    final string bar = new base_string("bar");
    final base_extension html = base_extension.HTML;
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.CURRENT.resolve(bar, html).to_string(), new base_string("bar.html"));
    assert ideal.machine.elements.runtime_util.values_equal(test_resolver.ROOT.resolve(bar, html).to_string(), new base_string("/bar.html"));
  }
  public void test_sub_catalogs() {
    final resource_catalog cat = test_resolver.CURRENT;
    final resource_identifier dog = cat.resolve(new base_string("dog"));
    assert ideal.machine.elements.runtime_util.values_equal(dog.to_string(), new base_string("dog"));
    final resource_catalog cat2 = dog.access_catalog();
    assert ideal.machine.elements.runtime_util.values_equal(cat2.id().to_string(), new base_string("dog"));
    final resource_identifier dog2 = cat2.resolve(new base_string("Yoshka"));
    assert ideal.machine.elements.runtime_util.values_equal(dog2.to_string(), new base_string("dog/Yoshka"));
  }
  public void test_root_subdirs() {
    final resource_catalog cat = test_resolver.ROOT;
    final resource_identifier dog = cat.resolve(new base_string("dog"));
    assert ideal.machine.elements.runtime_util.values_equal(dog.to_string(), new base_string("/dog"));
    final resource_catalog cat2 = dog.access_catalog();
    assert ideal.machine.elements.runtime_util.values_equal(cat2.id().to_string(), new base_string("/dog"));
    final resource_identifier dog2 = cat2.resolve(new base_string("Yoshka"));
    assert ideal.machine.elements.runtime_util.values_equal(dog2.to_string(), new base_string("/dog/Yoshka"));
  }
  public void test_multiple_subdirs() {
    resource_catalog foo = test_resolver.ROOT;
    resource_identifier bar = foo.resolve(new base_string("bar"));
    assert ideal.machine.elements.runtime_util.values_equal(bar.to_string(), new base_string("/bar"));
    foo = bar.access_catalog();
    assert ideal.machine.elements.runtime_util.values_equal(foo.id().to_string(), new base_string("/bar"));
    bar = foo.resolve(new base_string("baz"));
    assert ideal.machine.elements.runtime_util.values_equal(bar.to_string(), new base_string("/bar/baz"));
    foo = bar.access_catalog();
    bar = foo.resolve(new base_string("quux"));
    assert ideal.machine.elements.runtime_util.values_equal(bar.to_string(), new base_string("/bar/baz/quux"));
    foo = bar.access_catalog();
    bar = foo.resolve(new base_string(""));
    assert ideal.machine.elements.runtime_util.values_equal(bar.to_string(), new base_string("/bar/baz/quux"));
    bar = foo.resolve(new base_string("./././."));
    assert ideal.machine.elements.runtime_util.values_equal(bar.to_string(), new base_string("/bar/baz/quux"));
  }
  public void test_more_subdir_ops() {
    resource_catalog foo = test_resolver.CURRENT;
    resource_identifier bar = foo.resolve(new base_string("foo/bar/././baz"));
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("foo/bar/baz"), bar.to_string());
    foo = bar.access_catalog();
    bar = foo.resolve(new base_string(".."));
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("foo/bar"), bar.to_string());
    foo = bar.access_catalog();
    bar = foo.resolve(new base_string("../.."));
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("."), bar.to_string());
    foo = bar.access_catalog();
    bar = foo.resolve(new base_string(".."));
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("."), bar.to_string());
  }
  public void test_parent_catalog() {
    final resource_catalog foo = test_resolver.CURRENT;
    resource_identifier bar = foo.resolve(new base_string("foo/bar/././baz"));
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("foo/bar/baz"), bar.to_string());
    bar = bar.parent();
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("foo/bar"), bar.to_string());
    bar = bar.parent();
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("foo"), bar.to_string());
    bar = bar.parent();
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("."), bar.to_string());
    bar = bar.parent();
    assert ideal.machine.elements.runtime_util.values_equal(new base_string("."), bar.to_string());
  }
  public void test_filesystem() {
    final string directory_name = new base_string("runtime/resources");
    final hash_set<string> file_set = new hash_set<string>();
    file_set.add_all(new base_immutable_list<string>(new ideal.machine.elements.array<string>(new string[]{ new base_string("base_extension.i"), new base_string("base_resource_catalog.i"), new base_string("base_resource_identifier.i"), new base_string("base_resource_store.i"), new base_string("make_catalog_option.i"), new base_string("resource_store.i"), new base_string("resource_util.i"), new base_string("resources.i"), new base_string("test_resolver.i") })));
    final resource_catalog directory = filesystem.CURRENT_CATALOG.resolve(directory_name).access_catalog();
    final @Nullable dictionary<string, resource_identifier> content = directory.content().get();
    assert content != null;
    {
      final readonly_list<dictionary.entry<string, resource_identifier>> file_list = ((readonly_collection<dictionary.entry<string, resource_identifier>>) (Object) content).elements();
      for (Integer file_index = 0; file_index < file_list.size(); file_index += 1) {
        final dictionary.entry<string, resource_identifier> file = file_list.get(file_index);
        final string name = file.key();
        assert ideal.machine.elements.runtime_util.values_equal(file.value().to_string(), (ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(directory_name, new base_string("/")), name)));
        assert file_set.contains(name);
        file_set.remove(name);
      }
    }
    {
      file_set.is_empty();
      return;
    }
  }
  public test_resolver() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_file_catalogs"));
    this.test_file_catalogs();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_simple_resolve"));
    this.test_simple_resolve();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_resolve_extension"));
    this.test_resolve_extension();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_sub_catalogs"));
    this.test_sub_catalogs();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_root_subdirs"));
    this.test_root_subdirs();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_multiple_subdirs"));
    this.test_multiple_subdirs();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_more_subdir_ops"));
    this.test_more_subdir_ops();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_parent_catalog"));
    this.test_parent_catalog();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_resolver.test_filesystem"));
    this.test_filesystem();
    ideal.machine.elements.runtime_util.end_test();
  }
}
