// Autogenerated from runtime/texts/base_list_attribute_fragment.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.machine.channels.string_writer;

public class base_list_attribute_fragment extends debuggable implements list_attribute_fragment {
  private final immutable_list<attribute_fragment> the_fragments;
  public base_list_attribute_fragment(final readonly_list<attribute_fragment> the_fragments) {
    this.the_fragments = the_fragments.frozen_copy();
  }
  public static list_attribute_fragment make(final attribute_fragment first, final attribute_fragment second) {
    return new base_list_attribute_fragment(new base_immutable_list<attribute_fragment>(new ideal.machine.elements.array<attribute_fragment>(new attribute_fragment[]{ first, second })));
  }
  public static list_attribute_fragment make(final attribute_fragment first, final attribute_fragment second, final attribute_fragment third) {
    return new base_list_attribute_fragment(new base_immutable_list<attribute_fragment>(new ideal.machine.elements.array<attribute_fragment>(new attribute_fragment[]{ first, second, third })));
  }
  public @Override immutable_list<attribute_fragment> fragments() {
    return this.the_fragments;
  }
  public @Override string to_string() {
    final string_writer the_writer = new string_writer();
    {
      final readonly_list<attribute_fragment> node_list = this.the_fragments;
      for (Integer node_index = 0; node_index < node_list.size(); node_index += 1) {
        final attribute_fragment node = node_list.get(node_index);
        the_writer.write_all(node.to_string());
      }
    }
    return the_writer.elements();
  }
}
