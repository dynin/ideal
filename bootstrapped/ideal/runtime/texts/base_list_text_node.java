// Autogenerated from runtime/texts/base_list_text_node.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.machine.channels.string_writer;

public class base_list_text_node extends debuggable implements list_text_node {
  private final immutable_list<text_node> the_nodes;
  public base_list_text_node(final readonly_list<text_node> the_nodes) {
    this.the_nodes = the_nodes.frozen_copy();
  }
  public static list_text_node make(final text_node first, final text_node second) {
    return new base_list_text_node(new base_immutable_list<text_node>(new ideal.machine.elements.array<text_node>(new text_node[]{ first, second })));
  }
  public static list_text_node make(final text_node first, final text_node second, final text_node third) {
    return new base_list_text_node(new base_immutable_list<text_node>(new ideal.machine.elements.array<text_node>(new text_node[]{ first, second, third })));
  }
  public @Override immutable_list<text_node> nodes() {
    return this.the_nodes;
  }
  public @Override string to_string() {
    final string_writer the_writer = new string_writer();
    {
      final readonly_list<text_node> node_list = this.the_nodes;
      for (Integer node_index = 0; node_index < node_list.size(); node_index += 1) {
        final text_node node = node_list.get(node_index);
        the_writer.write_all(node.to_string());
      }
    }
    return the_writer.elements();
  }
}
