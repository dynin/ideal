// Autogenerated from runtime/texts/character_patterns.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.library.patterns.*;
import ideal.runtime.patterns.*;

public class character_patterns {
  public static pattern<Character> one(final function1<Boolean, Character> the_predicate) {
    return new predicate_pattern<Character>(the_predicate);
  }
  public static pattern<Character> one_character(final char the_character) {
    return new singleton_pattern<Character>(the_character);
  }
  public static pattern<Character> zero_or_more(final function1<Boolean, Character> the_predicate) {
    return new repeat_element<Character>(the_predicate, true);
  }
  public static pattern<Character> one_or_more(final function1<Boolean, Character> the_predicate) {
    return new repeat_element<Character>(the_predicate, false);
  }
  public static pattern<Character> repeat_or_none(final pattern<Character> the_pattern) {
    return new repeat_pattern<Character>(the_pattern, true);
  }
  public static pattern<Character> sequence(final readonly_list<pattern<Character>> patterns_list) {
    return new sequence_pattern<Character>(patterns_list);
  }
  public static option_pattern<Character> option(final readonly_list<pattern<Character>> patterns_list) {
    return new option_pattern<Character>(patterns_list);
  }
  public static string as_string_procedure(final readonly_list<Character> the_character_list) {
    return (base_string) the_character_list.frozen_copy();
  }
  public static matcher<Character, string> as_string(final pattern<Character> the_pattern) {
    return new procedure_matcher<Character, string>(the_pattern, new function1<string, readonly_list<Character>>() {
      @Override public string call(readonly_list<Character> first) {
        return character_patterns.as_string_procedure(first);
      }
    });
  }
  public static string select_2nd(final readonly_list<any_value> the_list) {
    return (string) the_list.get(1);
  }
}
