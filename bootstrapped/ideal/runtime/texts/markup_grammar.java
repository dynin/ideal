// Autogenerated from runtime/texts/markup_grammar.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;

public class markup_grammar {
  public final character_handler the_character_handler;
  public markup_grammar(final character_handler the_character_handler) {
    this.the_character_handler = the_character_handler;
  }
  public boolean is_whitespace(final char the_character) {
    return this.the_character_handler.is_whitespace(the_character);
  }
  public boolean is_letter(final char the_character) {
    return this.the_character_handler.is_letter(the_character);
  }
  public string parse(final string input) {
    int index = 0;
    while (index < input.size() && this.is_whitespace(input.get(index))) {
      index += 1;
    }
    final int begin = index;
    while (index < input.size() && this.is_letter(input.get(index))) {
      index += 1;
    }
    final int end = index;
    return input.slice(begin, end);
  }
}
