// Autogenerated from runtime/texts/test_elements.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;

import javax.annotation.Nullable;

public class test_elements {
  public void test_namespace_id() {
    assert ideal.machine.elements.runtime_util.values_equal(text_library.HTML_NS.short_name(), new base_string("html"));
    assert ideal.machine.elements.runtime_util.values_equal(text_library.HTML_NS.to_string(), new base_string("html"));
  }
  public void test_element_id() {
    assert ideal.machine.elements.runtime_util.values_equal(text_library.P.short_name(), new base_string("p"));
    assert text_library.P.get_namespace() == text_library.HTML_NS;
    assert ideal.machine.elements.runtime_util.values_equal(text_library.P.to_string(), new base_string("html:p"));
    assert ideal.machine.elements.runtime_util.values_equal(text_library.DIV.short_name(), new base_string("div"));
    assert text_library.DIV.get_namespace() == text_library.HTML_NS;
    assert ideal.machine.elements.runtime_util.values_equal(text_library.DIV.to_string(), new base_string("html:div"));
  }
  public void test_base_element() {
    final text_element element = new base_element(text_library.P);
    assert element.get_id() == text_library.P;
    assert ((readonly_collection<dictionary.entry<attribute_id, attribute_fragment>>) (Object) element.attributes()).is_empty();
    assert element.children() == null;
  }
  public void test_make_element() {
    final base_element node0 = new base_element(text_library.P);
    final text_node node1 = new base_string("foo");
    final immutable_list<text_node> nodes = new base_immutable_list<text_node>(new ideal.machine.elements.array<text_node>(new text_node[]{ node0, node1 }));
    final text_element element = text_utilities.make_element(text_library.BODY, nodes);
    assert element instanceof base_element;
    assert ((base_element) element).get_id() == text_library.BODY;
    assert ((readonly_collection<dictionary.entry<attribute_id, attribute_fragment>>) (Object) ((base_element) element).attributes()).is_empty();
    final @Nullable text_fragment children = ((base_element) element).children();
    assert children instanceof list_text_node;
    final immutable_list<text_node> child_nodes = ((list_text_node) children).nodes();
    assert ideal.machine.elements.runtime_util.values_equal(child_nodes.size(), 2);
    final text_node child0 = child_nodes.first();
    assert child0 instanceof base_element;
    assert ((base_element) child0).get_id() == text_library.P;
    assert ((readonly_collection<dictionary.entry<attribute_id, attribute_fragment>>) (Object) ((base_element) child0).attributes()).is_empty();
    assert ((base_element) child0).children() == null;
    final text_node child1 = child_nodes.get(1);
    assert child1 instanceof string;
    assert ideal.machine.elements.runtime_util.values_equal(((string) child1), new base_string("foo"));
  }
  public test_elements() { }
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test(new base_string("test_elements.test_namespace_id"));
    this.test_namespace_id();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_elements.test_element_id"));
    this.test_element_id();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_elements.test_base_element"));
    this.test_base_element();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test(new base_string("test_elements.test_make_element"));
    this.test_make_element();
    ideal.machine.elements.runtime_util.end_test();
  }
}
