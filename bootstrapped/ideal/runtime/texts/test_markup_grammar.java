// Autogenerated from runtime/texts/test_markup_grammar.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.runtime.texts.text_library.*;
import ideal.machine.characters.normal_handler;

public class test_markup_grammar {
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test("test_markup_grammar.test_entity_ref");
    test_entity_ref();
    ideal.machine.elements.runtime_util.end_test();
    ideal.machine.elements.runtime_util.start_test("test_markup_grammar.test_simple_parse");
    test_simple_parse();
    ideal.machine.elements.runtime_util.end_test();
  }
  public markup_grammar make_grammar() {
    final markup_grammar grammar = new markup_grammar(normal_handler.instance);
    grammar.add_entities(text_library.HTML_ENTITIES);
    grammar.complete();
    return grammar;
  }
  public void test_entity_ref() {
    final ideal.library.patterns.matcher<Character, special_text> entity_ref = this.make_grammar().entity_ref;
    assert entity_ref.call(new base_string("&lt;"));
    assert entity_ref.call(new base_string("&amp;"));
    assert entity_ref.call(new base_string("&bull;"));
    assert !entity_ref.call(new base_string("foo"));
    assert !entity_ref.call(new base_string("&foo"));
    assert !entity_ref.call(new base_string("foo;"));
    assert entity_ref.parse(new base_string("&lt;")) == text_library.LT;
    assert entity_ref.parse(new base_string("&gt;")) == text_library.GT;
    assert entity_ref.parse(new base_string("&apos;")) == text_library.APOS;
    assert entity_ref.parse(new base_string("&quot;")) == text_library.QUOT;
    assert entity_ref.parse(new base_string("&mdash;")) == text_library.MDASH;
    assert entity_ref.parse(new base_string("&nbsp;")) == text_library.NBSP;
  }
  public void test_simple_parse() {
    final ideal.library.patterns.pattern<Character> document_pattern = this.make_grammar().document_pattern;
    assert document_pattern.call(new base_string("<html>foo</html>"));
    assert document_pattern.call(new base_string("  <html>foo</html>  "));
    assert document_pattern.call(new base_string("  <html  >foo</html  >  "));
    assert document_pattern.call(new base_string("  <html  >Hello &amp; goodbye!</html  >  "));
    assert document_pattern.call(new base_string("  <html  />  "));
    assert document_pattern.call(new base_string("<html/>"));
    assert document_pattern.call(new base_string("  <html>Hello <em>world!</em></html>  "));
    assert document_pattern.call(new base_string("  <html><body ><p>Hello <em >world!</em ></p></body ></html>  "));
    assert document_pattern.call(new base_string("  <html><body > <p>Hello<br />world!</p> </body ></html>  "));
    assert document_pattern.call(new base_string("  <html><body > Hello &lt;world!&gt; </body ></html>  "));
    assert document_pattern.call(new base_string("<html><p class=\'klass\'>foo</p></html>"));
    assert document_pattern.call(new base_string("<html><a class = \'klass\' href = \'link\'>bar</a></html>"));
    assert document_pattern.call(new base_string("<html><p class = \'value\">==\' attr=\"foo\'\">foo</p></html>"));
    assert document_pattern.call(new base_string("<html><p class = \'***\' attr=\"baz\">foo</p></html>"));
    assert !document_pattern.call(new base_string(" no markup "));
    assert !document_pattern.call(new base_string("  <html>foo  "));
    assert !document_pattern.call(new base_string("  <html>foo<bar>  "));
    assert !document_pattern.call(new base_string("  <>foo  "));
    assert !document_pattern.call(new base_string("  &amp;<html>foo</html>  "));
    assert !document_pattern.call(new base_string("<html><p class=\'klass\">foo</p></html>"));
    assert !document_pattern.call(new base_string("<html><p class=\'klass\'>foo</p class=\"foo\"></html>"));
    assert !document_pattern.call(new base_string("<html foo= ><p class=\'klass\'>foo</p></html>"));
    assert !document_pattern.call(new base_string("<html foo=bar><p class=\'klass\'>foo</p></html>"));
    assert document_pattern.call(new base_string("  <abc>foo</def>  "));
  }
}
