// Autogenerated from runtime/texts/test_markup_grammar.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.machine.characters.normal_handler;

public class test_markup_grammar {
  public void run_all_tests() {
    ideal.machine.elements.runtime_util.start_test("test_markup_grammar.test_simple_parse");
    test_simple_parse();
    ideal.machine.elements.runtime_util.end_test();
  }
  public void test_simple_parse() {
    final markup_grammar grammar = new markup_grammar(normal_handler.instance);
    final ideal.library.patterns.pattern<Character> document_pattern = grammar.document_pattern;
    assert document_pattern.call(new base_string("<html>foo</html>"));
    assert document_pattern.call(new base_string("  <html>foo</html>  "));
    assert document_pattern.call(new base_string("  <html  >foo</html  >  "));
    assert document_pattern.call(new base_string("  <html  />  "));
    assert document_pattern.call(new base_string("<html/>"));
    assert document_pattern.call(new base_string("  <html>Hello <em>world!</em></html>  "));
    assert document_pattern.call(new base_string("  <html><body ><p>Hello <em >world!</em ></p></body ></html>  "));
    assert document_pattern.call(new base_string("  <html><body > <p>Hello<br />world!</p> </body ></html>  "));
    assert !document_pattern.call(new base_string(" no markup "));
    assert !document_pattern.call(new base_string("  <html>foo  "));
    assert !document_pattern.call(new base_string("  <html>foo<bar>  "));
    assert !document_pattern.call(new base_string("  <>foo  "));
    assert document_pattern.call(new base_string("  <abc>foo</def>  "));
  }
}
