// Autogenerated from runtime/texts/text_formatter.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.characters.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;
import ideal.runtime.patterns.*;

import javax.annotation.Nullable;

public abstract class text_formatter extends text_visitor<Void> implements output<text_fragment> {
  protected static final char NEWLINE = '\n';
  protected static final singleton_pattern<Character> NEWLINE_PATTERN = new singleton_pattern<Character>(text_formatter.NEWLINE);
  protected final output<Character> the_output;
  protected final string spaces;
  protected Integer indent;
  protected boolean first;
  protected text_formatter(final output<Character> the_output, final string spaces) {
    this.the_output = the_output;
    this.spaces = spaces;
    this.indent = 0;
    this.first = true;
  }
  public @Override void write(final text_fragment fragment) {
    this.process(fragment);
  }
  public @Override void write_all(final readonly_list<text_fragment> fragments) {
    final readonly_list<text_fragment> fragment_list = fragments;
    for (Integer fragment_index = 0; fragment_index < fragment_list.size(); fragment_index += 1) {
      final text_fragment fragment = fragment_list.get(fragment_index);
      this.process(fragment);
    }
  }
  public @Override void sync() {
    this.the_output.sync();
  }
  public @Override void close() {
    this.the_output.close();
  }
  public abstract @Override Void process_string(string s);
  public abstract @Override Void process_element(text_element element);
  public abstract @Override Void process_special(special_text t);
  public @Override Void process_nodes(final list_text_node nodes) {
    this.write_all((readonly_list<text_fragment>) (Object) nodes.nodes());
    return null;
  }
  public @Override Void process_attributes(final list_attribute_fragment fragments) {
    this.write_all((readonly_list<text_fragment>) (Object) fragments.fragments());
    return null;
  }
  protected void write_string(final string the_string) {
    Integer index = 0;
    while (index < the_string.size()) {
      if (this.first) {
        this.do_write_indent();
      }
      final @Nullable range newline_match = text_formatter.NEWLINE_PATTERN.find_first(the_string, index);
      if (newline_match == null) {
        this.do_write_string(the_string.skip(index));
        break;
      } else {
        final Integer newline_index = newline_match.begin();
        this.do_write_string(the_string.slice(index, newline_index));
        this.do_write_newline();
        index = newline_match.end();
        this.first = true;
      }
    }
  }
  protected void write_newline() {
    this.do_write_newline();
    this.first = true;
    this.the_output.sync();
  }
  protected void do_write_newline() {
    this.the_output.write(text_formatter.NEWLINE);
  }
  protected void do_write_indent() {
    for (Integer i = 0; i < this.indent; i += 1) {
      this.the_output.write_all(this.spaces);
    }
    this.first = false;
  }
  protected void do_write_string(final readonly_list<Character> s) {
    this.the_output.write_all(s);
  }
}
