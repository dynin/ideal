============ INIT
==== Loading testdata/double.i
============ PARSE
============ BOOTSTRAP
==== Loading library/elements.i
==== Loading library/operators.i
==== Loading ideal.i
============ DISPLAY
[
  variable_construct {
    annotations: [ ]
    variable_type: <null>
    name: one
    post_annotations: [ ]
    init: literal_construct {
      the_literal: integer_literal {
        the_value: 1
        image: "1"
        radix: 10
      }
    }
  }
  variable_construct {
    annotations: [ ]
    variable_type: <null>
    name: two
    post_annotations: [ ]
    init: literal_construct {
      the_literal: integer_literal {
        the_value: 2
        image: "2"
        radix: 10
      }
    }
  }
  variable_construct {
    annotations: [ ]
    variable_type: name_construct {
      the_name: integer
    }
    name: three
    post_annotations: [ ]
    init: parameter_construct {
      main: name_construct {
        the_name: plus
      }
      parameters: [
        name_construct {
          the_name: one
        }
        name_construct {
          the_name: two
        }
      ]
      grouping: parens
    }
  }
  procedure_construct {
    annotations: [ ]
    ret: name_construct {
      the_name: integer
    }
    name: double
    parameters: [
      variable_construct {
        annotations: [ ]
        variable_type: name_construct {
          the_name: integer
        }
        name: x
        post_annotations: [ ]
        init: <null>
      }
    ]
    post_annotations: [ ]
    body: block_construct {
      annotations: [ ]
      body: [
        return_construct {
          the_expression: parameter_construct {
            main: name_construct {
              the_name: plus
            }
            parameters: [
              name_construct {
                the_name: x
              }
              name_construct {
                the_name: x
              }
            ]
            grouping: parens
          }
        }
      ]
    }
  }
  procedure_construct {
    annotations: [ ]
    ret: name_construct {
      the_name: integer
    }
    name: add5
    parameters: [
      variable_construct {
        annotations: [ ]
        variable_type: name_construct {
          the_name: integer
        }
        name: y
        post_annotations: [ ]
        init: <null>
      }
    ]
    post_annotations: [ ]
    body: block_construct {
      annotations: [ ]
      body: [
        return_construct {
          the_expression: parameter_construct {
            main: name_construct {
              the_name: plus
            }
            parameters: [
              name_construct {
                the_name: y
              }
              literal_construct {
                the_literal: integer_literal {
                  the_value: 5
                  image: "5"
                  radix: 10
                }
              }
            ]
            grouping: parens
          }
        }
      ]
    }
  }
  parameter_construct {
    main: name_construct {
      the_name: println
    }
    parameters: [
      parameter_construct {
        main: name_construct {
          the_name: double
        }
        parameters: [
          parameter_construct {
            main: name_construct {
              the_name: double
            }
            parameters: [
              name_construct {
                the_name: three
              }
            ]
            grouping: parens
          }
        ]
        grouping: parens
      }
    ]
    grouping: parens
  }
  parameter_construct {
    main: name_construct {
      the_name: println
    }
    parameters: [
      parameter_construct {
        main: name_construct {
          the_name: plus
        }
        parameters: [
          parameter_construct {
            main: name_construct {
              the_name: add5
            }
            parameters: [
              name_construct {
                the_name: three
              }
            ]
            grouping: parens
          }
          name_construct {
            the_name: two
          }
        ]
        grouping: parens
      }
    ]
    grouping: parens
  }
  parameter_construct {
    main: name_construct {
      the_name: println
    }
    parameters: [
      literal_construct {
        the_literal: integer_literal {
          the_value: 7
          image: "7"
          radix: 10
        }
      }
      literal_construct {
        the_literal: quoted_literal {
          value: " "
          with_escapes: " "
          quote: "
        }
      }
      parameter_construct {
        main: name_construct {
          the_name: add5
        }
        parameters: [
          literal_construct {
            the_literal: integer_literal {
              the_value: 63
              image: "63"
              radix: 10
            }
          }
        ]
        grouping: parens
      }
    ]
    grouping: parens
  }
  block_construct {
    annotations: [ ]
    body: [
      parameter_construct {
        main: name_construct {
          the_name: println
        }
        parameters: [
          name_construct {
            the_name: one
          }
          literal_construct {
            the_literal: quoted_literal {
              value: " "
              with_escapes: " "
              quote: "
            }
          }
          parameter_construct {
            main: name_construct {
              the_name: plus
            }
            parameters: [
              name_construct {
                the_name: one
              }
              name_construct {
                the_name: one
              }
            ]
            grouping: parens
          }
          literal_construct {
            the_literal: quoted_literal {
              value: " "
              with_escapes: " "
              quote: "
            }
          }
          name_construct {
            the_name: one
          }
        ]
        grouping: parens
      }
    ]
  }
]
============ TARGET_DECL
============ TYPE_DECL
============ IMPORT_AND_TYPE_VAR_DECL
============ SUPERTYPE_DECL
============ PREPARE_METHOD_AND_VARIABLE
============ METHOD_AND_VARIABLE_DECL
============ BODY_CHECK
============ EXECUTE
12
10
7 68
1 2 1
one : 1;
two : 2;
integer three : plus(one, two);
integer double(integer x) {
  return plus(x, x);
}
integer add5(integer y) {
  return plus(y, 5);
}
println(double(double(three)));
println(plus(add5(three), two));
println(7, " ", add5(63));
{
  println(one, " ", plus(one, one), " ", one);
}
