============ INIT
==== Loading testdata/sequence.i
============ PARSE
============ BOOTSTRAP
==== Loading library/elements.i
==== Loading library/operators.i
==== Loading ideal.i
============ DISPLAY
[
  import_construct {
    annotations: [ ]
    type_construct: resolve_construct {
      qualifier: resolve_construct {
        qualifier: name_construct {
          the_name: java
        }
        the_name: util
      }
      the_name: List
    }
  }
  import_construct {
    annotations: [ ]
    type_construct: resolve_construct {
      qualifier: resolve_construct {
        qualifier: name_construct {
          the_name: java
        }
        the_name: util
      }
      the_name: ArrayList
    }
  }
  import_construct {
    annotations: [
      modifier_construct {
        the_kind: <implicit>
        parameters: <null>
      }
    ]
    type_construct: resolve_construct {
      qualifier: name_construct {
        the_name: ideal
      }
      the_name: concepts
    }
  }
  import_construct {
    annotations: [
      modifier_construct {
        the_kind: <implicit>
        parameters: <null>
      }
    ]
    type_construct: resolve_construct {
      qualifier: name_construct {
        the_name: ideal
      }
      the_name: constructs
    }
  }
  import_construct {
    annotations: [ ]
    type_construct: resolve_construct {
      qualifier: resolve_construct {
        qualifier: name_construct {
          the_name: ideal
        }
        the_name: concepts
      }
      the_name: type
    }
  }
  import_construct {
    annotations: [ ]
    type_construct: resolve_construct {
      qualifier: resolve_construct {
        qualifier: name_construct {
          the_name: ideal
        }
        the_name: scanners
      }
      the_name: scanner_element
    }
  }
  import_construct {
    annotations: [ ]
    type_construct: resolve_construct {
      qualifier: resolve_construct {
        qualifier: name_construct {
          the_name: ideal
        }
        the_name: semantics
      }
      the_name: lookup_row
    }
  }
  type_declaration_construct {
    annotations: [
      modifier_construct {
        the_kind: <public>
        parameters: <null>
      }
    ]
    kind: class
    name: sequence
    parameters: [
      variable_construct {
        annotations: [ ]
        variable_type: name_construct {
          the_name: readonly_data
        }
        name: element
        post_annotations: [ ]
        init: <null>
      }
    ]
    body: [
      supertype_construct {
        annotations: [ ]
        subtype_flavor: <null>
        tag: <implements>
        type_constructs: [
          name_construct {
            the_name: readonly_data
          }
        ]
      }
      variable_construct {
        annotations: [
          modifier_construct {
            the_kind: <private>
            parameters: <null>
          }
        ]
        variable_type: name_construct {
          the_name: List
        }
        name: list
        post_annotations: [ ]
        init: <null>
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [ ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            variable_construct {
              annotations: [ ]
              variable_type: <null>
              name: list
              post_annotations: [ ]
              init: parameter_construct {
                main: resolve_construct {
                  qualifier: name_construct {
                    the_name: ArrayList
                  }
                  the_name: special_name {
                    name: "new"
                  }
                }
                parameters: [ ]
                grouping: parens
              }
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: sequence
            }
            name: ns1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append_all
              }
              parameters: [
                name_construct {
                  the_name: ns1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: sequence
            }
            name: ns2
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append_all
              }
              parameters: [
                name_construct {
                  the_name: ns2
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n3
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n3
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n3
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n4
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n3
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n4
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n3
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n4
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n5
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n3
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n4
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n5
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
          modifier_construct {
            the_kind: <overload>
            parameters: <null>
          }
        ]
        ret: <null>
        name: sequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n1
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n2
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n3
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n4
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n5
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: n6
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: name_construct {
                the_name: special_name {
                  name: "this"
                }
              }
              parameters: [ ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n1
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n2
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n3
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n4
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n5
                }
              ]
              grouping: parens
            }
            parameter_construct {
              main: name_construct {
                the_name: append
              }
              parameters: [
                name_construct {
                  the_name: n6
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: integer
        }
        name: size
        parameters: [ ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            return_construct {
              the_expression: parameter_construct {
                main: resolve_construct {
                  qualifier: name_construct {
                    the_name: list
                  }
                  the_name: size
                }
                parameters: [ ]
                grouping: parens
              }
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: boolean
        }
        name: empty
        parameters: <null>
        post_annotations: [ ]
        body: parameter_construct {
          main: resolve_construct {
            qualifier: name_construct {
              the_name: list
            }
            the_name: isEmpty
          }
          parameters: [ ]
          grouping: parens
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: boolean
        }
        name: is_not_empty
        parameters: <null>
        post_annotations: [ ]
        body: operator_construct {
          the_operator: operator {
            the_operator_type: prefix
            name: !
            alpha_name: logical_not
            the_precedence: UNARY
          }
          arguments: [
            parameter_construct {
              main: name_construct {
                the_name: empty
              }
              parameters: [ ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: element
        }
        name: get
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: integer
            }
            name: index
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            return_construct {
              the_expression: operator_construct {
                the_operator: cast_type {
                  the_operator_type: infix
                  name: !>
                  alpha_name: hard_cast
                  the_precedence: RELATIONAL
                }
                arguments: [
                  parameter_construct {
                    main: resolve_construct {
                      qualifier: name_construct {
                        the_name: list
                      }
                      the_name: get
                    }
                    parameters: [
                      name_construct {
                        the_name: index
                      }
                    ]
                    grouping: parens
                  }
                  name_construct {
                    the_name: element
                  }
                ]
              }
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: void
        }
        name: append
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: element
            }
            name: t
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            parameter_construct {
              main: resolve_construct {
                qualifier: name_construct {
                  the_name: list
                }
                the_name: add
              }
              parameters: [
                name_construct {
                  the_name: t
                }
              ]
              grouping: parens
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: void
        }
        name: append_all
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: parameter_construct {
              main: name_construct {
                the_name: sequence
              }
              parameters: [
                name_construct {
                  the_name: element
                }
              ]
              grouping: brackets
            }
            name: s
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [ ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: sequence
        }
        name: subsequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: integer
            }
            name: begin
            post_annotations: [ ]
            init: <null>
          }
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: integer
            }
            name: end
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            constraint_construct {
              the_constraint_category: constraint_category {
                name_string: "assert"
                name: "ASSERT_CONSTRAINT"
                ordinal: 0
              }
              expr: operator_construct {
                the_operator: operator {
                  the_operator_type: infix
                  name: &&
                  alpha_name: logical_and
                  the_precedence: LOGICAL_AND
                }
                arguments: [
                  operator_construct {
                    the_operator: operator {
                      the_operator_type: infix
                      name: >=
                      alpha_name: greater_equal
                      the_precedence: RELATIONAL
                    }
                    arguments: [
                      name_construct {
                        the_name: begin
                      }
                      literal_construct {
                        the_literal: integer_literal {
                          integer_value: 0
                          image: "0"
                          radix: 10
                        }
                      }
                    ]
                  }
                  operator_construct {
                    the_operator: operator {
                      the_operator_type: infix
                      name: <=
                      alpha_name: less_equal
                      the_precedence: RELATIONAL
                    }
                    arguments: [
                      name_construct {
                        the_name: end
                      }
                      parameter_construct {
                        main: name_construct {
                          the_name: size
                        }
                        parameters: [ ]
                        grouping: parens
                      }
                    ]
                  }
                ]
              }
            }
            variable_construct {
              annotations: [ ]
              variable_type: <null>
              name: result
              post_annotations: [ ]
              init: parameter_construct {
                main: resolve_construct {
                  qualifier: parameter_construct {
                    main: name_construct {
                      the_name: sequence
                    }
                    parameters: [
                      name_construct {
                        the_name: element
                      }
                    ]
                    grouping: brackets
                  }
                  the_name: special_name {
                    name: "new"
                  }
                }
                parameters: [ ]
                grouping: parens
              }
            }
            for_construct {
              init: variable_construct {
                annotations: [
                  modifier_construct {
                    the_kind: <var>
                    parameters: <null>
                  }
                ]
                variable_type: name_construct {
                  the_name: integer
                }
                name: i
                post_annotations: [ ]
                init: name_construct {
                  the_name: begin
                }
              }
              condition: operator_construct {
                the_operator: operator {
                  the_operator_type: infix
                  name: <
                  alpha_name: less
                  the_precedence: RELATIONAL
                }
                arguments: [
                  name_construct {
                    the_name: i
                  }
                  name_construct {
                    the_name: end
                  }
                ]
              }
              update: operator_construct {
                the_operator: operator {
                  the_operator_type: infix
                  name: +=
                  alpha_name: add_assign
                  the_precedence: ASSIGNMENT
                }
                arguments: [
                  name_construct {
                    the_name: i
                  }
                  literal_construct {
                    the_literal: integer_literal {
                      integer_value: 1
                      image: "1"
                      radix: 10
                    }
                  }
                ]
              }
              body: block_construct {
                annotations: [ ]
                body: [
                  parameter_construct {
                    main: resolve_construct {
                      qualifier: name_construct {
                        the_name: result
                      }
                      the_name: append
                    }
                    parameters: [
                      parameter_construct {
                        main: name_construct {
                          the_name: get
                        }
                        parameters: [
                          name_construct {
                            the_name: i
                          }
                        ]
                        grouping: parens
                      }
                    ]
                    grouping: parens
                  }
                ]
              }
            }
            return_construct {
              the_expression: name_construct {
                the_name: result
              }
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: sequence
        }
        name: subsequence
        parameters: [
          variable_construct {
            annotations: [ ]
            variable_type: name_construct {
              the_name: integer
            }
            name: begin
            post_annotations: [ ]
            init: <null>
          }
        ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            return_construct {
              the_expression: parameter_construct {
                main: name_construct {
                  the_name: subsequence
                }
                parameters: [
                  name_construct {
                    the_name: begin
                  }
                  parameter_construct {
                    main: name_construct {
                      the_name: size
                    }
                    parameters: [ ]
                    grouping: parens
                  }
                ]
                grouping: parens
              }
            }
          ]
        }
      }
      procedure_construct {
        annotations: [
          modifier_construct {
            the_kind: <public>
            parameters: <null>
          }
        ]
        ret: name_construct {
          the_name: void
        }
        name: test
        parameters: [ ]
        post_annotations: [ ]
        body: block_construct {
          annotations: [ ]
          body: [
            conditional_construct {
              cond_expr: name_construct {
                the_name: true
              }
              then_expr: block_construct {
                annotations: [ ]
                body: [
                  parameter_construct {
                    main: name_construct {
                      the_name: test
                    }
                    parameters: [ ]
                    grouping: parens
                  }
                ]
              }
              else_expr: block_construct {
                annotations: [ ]
                body: [
                  parameter_construct {
                    main: name_construct {
                      the_name: test
                    }
                    parameters: [ ]
                    grouping: parens
                  }
                ]
              }
              is_statement: true
            }
          ]
        }
      }
    ]
  }
]
============ TARGET_DECL
============ TYPE_DECL
============ IMPORT_AND_TYPE_VAR_DECL
testdata/sequence.i:7: Lookup failed: no java in <root>
import java.util.List;
       ^^^^
testdata/sequence.i:8: Lookup failed: no java in <root>
import java.util.ArrayList;
       ^^^^
testdata/sequence.i:11: Lookup failed: no concepts in ideal
implicit import ideal.concepts;
                -----^--------
testdata/sequence.i:12: Lookup failed: no constructs in ideal
implicit import ideal.constructs;
                -----^----------
testdata/sequence.i:13: Lookup failed: no concepts in ideal
import ideal.concepts.type;
       -----^--------
testdata/sequence.i:14: Lookup failed: no scanners in ideal
import ideal.scanners.scanner_element;
       -----^--------
testdata/sequence.i:15: Lookup failed: no semantics in ideal
import ideal.semantics.lookup_row;
       -----^---------
testdata/sequence.i:17: Lookup failed: no readonly_data in sequence
public class sequence[readonly_data element] {
                      ^^^^^^^^^^^^^
testdata/sequence.i:18: Lookup failed: no readonly_data in sequence
  implements readonly_data;
             ^^^^^^^^^^^^^
============ SUPERTYPE_DECL
============ PREPARE_METHOD_AND_VARIABLE
============ METHOD_AND_VARIABLE_DECL
============ BODY_CHECK
import java.util.List;
import java.util.ArrayList;
implicit import ideal.concepts;
implicit import ideal.constructs;
import ideal.concepts.type;
import ideal.scanners.scanner_element;
import ideal.semantics.lookup_row;
public class sequence[readonly_data element] {
  implements readonly_data;
  private List list;
  public overload sequence() {
    list : ArrayList.new();
  }
  public overload sequence(element n1) {
    this();
    append(n1);
  }
  public overload sequence(element n1, element n2) {
    this();
    append(n1);
    append(n2);
  }
  public overload sequence(sequence ns1, element n2) {
    this();
    append_all(ns1);
    append(n2);
  }
  public overload sequence(element n1, sequence ns2) {
    this();
    append(n1);
    append_all(ns2);
  }
  public overload sequence(element n1, element n2, element n3) {
    this();
    append(n1);
    append(n2);
    append(n3);
  }
  public overload sequence(element n1, element n2, element n3, element n4) {
    this();
    append(n1);
    append(n2);
    append(n3);
    append(n4);
  }
  public overload sequence(element n1, element n2, element n3, element n4, element n5) {
    this();
    append(n1);
    append(n2);
    append(n3);
    append(n4);
    append(n5);
  }
  public overload sequence(element n1, element n2, element n3, element n4, element n5, element n6) {
    this();
    append(n1);
    append(n2);
    append(n3);
    append(n4);
    append(n5);
    append(n6);
  }
  public integer size() {
    return list.size();
  }
  public boolean empty => list.isEmpty();
  public boolean is_not_empty => !empty();
  public element get(integer index) {
    return list.get(index) !> element;
  }
  public void append(element t) {
    list.add(t);
  }
  public void append_all(sequence[element] s) { }
  public sequence subsequence(integer begin, integer end) {
    assert begin >= 0 && end <= size();
    result : sequence[element].new();
    for (var integer i : begin; i < end; i += 1) {
      result.append(get(i));
    }
    return result;
  }
  public sequence subsequence(integer begin) {
    return subsequence(begin, size());
  }
  public void test() {
    if (true) {
      test();
    } else {
      test();
    }
  }
}
